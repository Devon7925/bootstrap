// The AST compiler is responsible for taking raw source text and transforming it
// into the intermediate representation that eventually feeds the WebAssembly
// backend.  The work happens in a few broad stages:
//   1. Parse the input into an AST stored in linear memory (see parse_* helpers).
//   2. Resolve names, types, and control-flow invariants (validate_program and
//      resolve_* helpers).
//   3. Emit WebAssembly bytes from the validated AST (implemented in
//      wasm_output.bp).
// Keeping these phases well documented makes it easier to understand which
// helpers participate in which portion of the pipeline.

use "./ast_compiler_base_lexing.bp";
use "./ast_compiler_base_state.bp";
use "./ast_compiler_base_const_eval.bp";
