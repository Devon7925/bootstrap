fn constant_eval_integer_type_supported(type_id: i32) -> bool {
    if !type_id_is_integer(type_id) {
        return false;
    };
    if type_id_is_64_bit_integer(type_id) {
        return false;
    };
    true
}

fn normalize_integer_value(value: i32, type_id: i32) -> i32 {
    let width: i32 = integer_type_bit_width(type_id);
    if width < 0 {
        return value;
    };
    if width >= 32 {
        return value;
    };
    let mask: i32 = (1 << width) - 1;
    let masked: i32 = value & mask;
    if type_id_is_signed_integer(type_id) {
        let shift: i32 = 32 - width;
        return (masked << shift) >> shift;
    };
    masked
}

fn compare_unsigned(a: i32, b: i32) -> i32 {
    let a_sign: i32 = a >> 31;
    let b_sign: i32 = b >> 31;
    if a_sign != b_sign {
        if a_sign == 0 {
            return -1;
        };
        return 1;
    };
    if a < b {
        return -1;
    };
    if a > b {
        return 1;
    };
    0
}

fn logical_shr(value: i32, amount: i32) -> i32 {
    if amount <= 0 {
        return value;
    };
    if amount >= 32 {
        return 0;
    };
    let mut count: i32 = 0;
    let mut current: i32 = value;
    loop {
        if count >= amount {
            break;
        };
        let shifted: i32 = current >> 1;
        if current < 0 {
            current = shifted & 2147483647;
        } else {
            current = shifted;
        };
        count = count + 1;
    };
    current
}

const CONST_EVAL_STATUS_OK: i32 = 0;
const CONST_EVAL_STATUS_BREAK: i32 = 1;
const CONST_EVAL_STATUS_CONTINUE: i32 = 2;
const CONST_EVAL_STATUS_RETURN: i32 = 3;
const CONST_EVAL_LOOP_LIMIT: i32 = 1048576;

fn interpret_constant_expression(
    ast_base: i32,
    expr_index: i32,
    scratch_base: i32,
    scratch_top_ptr: i32,
    out_value_ptr: i32,
    out_type_ptr: i32,
    param_values_ptr: i32,
    param_count: i32,
    env_values_count: i32,
) -> i32 {
    if expr_index < 0 {
        return -1;
    };
    if expr_index >= ast_expr_count(ast_base) {
        return -1;
    };
    let entry_ptr: i32 = ast_expr_entry_ptr(ast_base, expr_index);
    let kind: i32 = load_i32(entry_ptr);
    let saved_top: i32 = load_i32(scratch_top_ptr);
    if kind == 0 {
        let value: i32 = load_i32(entry_ptr + 4);
        let expr_type: i32 = ast_expr_type(ast_base, expr_index);
        if expr_type < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        store_i32(out_value_ptr, value);
        store_i32(out_type_ptr, expr_type);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 6 {
        if param_count <= 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if param_values_ptr < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let param_index: i32 = load_i32(entry_ptr + 4);
        if param_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if param_index >= param_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if param_index >= env_values_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let env_ptr: i32 = param_values_ptr + param_index * 8;
        let value: i32 = load_i32(env_ptr);
        let value_type: i32 = load_i32(env_ptr + 4);
        if value_type < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let expr_type: i32 = ast_expr_type(ast_base, expr_index);
        if expr_type < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if value_type != expr_type {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        store_i32(out_value_ptr, value);
        store_i32(out_type_ptr, value_type);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 7 {
        let condition_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        let else_index: i32 = load_i32(entry_ptr + 12);
        if condition_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if then_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if else_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let cond_offset: i32 = load_i32(scratch_top_ptr);
        let cond_value_ptr: i32 = scratch_base + cond_offset;
        let cond_type_ptr: i32 = cond_value_ptr + 4;
        store_i32(scratch_top_ptr, cond_offset + 8);
        let cond_status: i32 = interpret_constant_expression(
            ast_base,
            condition_index,
            scratch_base,
            scratch_top_ptr,
            cond_value_ptr,
            cond_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if cond_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if cond_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if load_i32(cond_type_ptr) != BUILTIN_TYPE_ID_BOOL {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let cond_bool: i32 = if load_i32(cond_value_ptr) != 0 { 1 } else { 0 };
        store_i32(scratch_top_ptr, cond_offset);
        let branch_index: i32 = if cond_bool != 0 { then_index } else { else_index };
        let branch_status: i32 = interpret_constant_expression(
            ast_base,
            branch_index,
            scratch_base,
            scratch_top_ptr,
            out_value_ptr,
            out_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if branch_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if branch_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return branch_status;
        };
        let expr_type: i32 = ast_expr_type(ast_base, expr_index);
        let branch_type: i32 = load_i32(out_type_ptr);
        if expr_type >= 0 && branch_type >= 0 {
            if expr_type != branch_type {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
        };
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 8 {
        if param_values_ptr < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if env_values_count <= 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let local_index: i32 = load_i32(entry_ptr + 4);
        if local_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if local_index < param_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if local_index >= env_values_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let slot_ptr: i32 = param_values_ptr + local_index * 8;
        let value: i32 = load_i32(slot_ptr);
        let value_type: i32 = load_i32(slot_ptr + 4);
        if value_type < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let expr_type: i32 = ast_expr_type(ast_base, expr_index);
        if expr_type < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if value_type != expr_type {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        store_i32(out_value_ptr, value);
        store_i32(out_type_ptr, value_type);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 1 {
        let metadata_ptr: i32 = load_i32(entry_ptr + 4);
        if metadata_ptr < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let mut callee_index: i32 = load_i32(call_metadata_callee_index_ptr(metadata_ptr));
        if callee_index < 0 {
            let call_name_ptr: i32 = call_metadata_name_ptr(metadata_ptr);
            let call_name_len: i32 = call_metadata_name_len(metadata_ptr);
            if call_name_ptr < 0 {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            let total_functions: i32 = load_i32(ast_functions_count_ptr(ast_base));
            let mut search_idx: i32 = 0;
            let mut found_index: i32 = -1;
            loop {
                if search_idx >= total_functions {
                    break;
                };
                let search_entry_ptr: i32 = ast_function_entry_ptr(ast_base, search_idx);
                let search_name_ptr: i32 = load_i32(search_entry_ptr);
                let search_name_len: i32 = load_i32(search_entry_ptr + 4);
                if identifiers_match(call_name_ptr, call_name_len, search_name_ptr, search_name_len) {
                    found_index = search_idx;
                    break;
                };
                search_idx = search_idx + 1;
            };
            if found_index < 0 {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            callee_index = found_index;
            store_i32(call_metadata_callee_index_ptr(metadata_ptr), callee_index);
        };
        if !ast_function_is_const(ast_base, callee_index) {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let arg_count: i32 = call_metadata_arg_count(metadata_ptr);
        let args_base: i32 = call_metadata_args_base(metadata_ptr);
        if arg_count < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let mut arg_idx: i32 = 0;
        loop {
            if arg_idx >= arg_count {
                break;
            };
            let current_offset: i32 = load_i32(scratch_top_ptr);
            let arg_value_ptr: i32 = scratch_base + current_offset;
            let arg_type_ptr: i32 = arg_value_ptr + 4;
            store_i32(scratch_top_ptr, current_offset + 8);
            let arg_expr_index: i32 = load_i32(args_base + arg_idx * 4);
            let arg_status: i32 = interpret_constant_expression(
                ast_base,
                arg_expr_index,
                scratch_base,
                scratch_top_ptr,
                arg_value_ptr,
                arg_type_ptr,
                param_values_ptr,
                param_count,
                env_values_count,
            );
            if arg_status < 0 {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            if arg_status != CONST_EVAL_STATUS_OK {
                store_i32(scratch_top_ptr, saved_top);
                return arg_status;
            };
            arg_idx = arg_idx + 1;
        };
        let callee_entry_ptr: i32 = ast_function_entry_ptr(ast_base, callee_index);
        let callee_param_count: i32 = load_i32(callee_entry_ptr + 8);
        if callee_param_count != arg_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let body_kind: i32 = load_i32(callee_entry_ptr + 12);
        if body_kind != 2 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let body_expr_index: i32 = load_i32(callee_entry_ptr + 16);
        if body_expr_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let locals_count: i32 = load_i32(callee_entry_ptr + 20);
        if locals_count < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let env_total: i32 = callee_param_count + locals_count;
        let env_ptr: i32 = if env_total > 0 {
            scratch_base + saved_top
        } else {
            0
        };
        if locals_count > 0 {
            let after_args_offset: i32 = load_i32(scratch_top_ptr);
            store_i32(scratch_top_ptr, after_args_offset + locals_count * 8);
            let mut local_fill_idx: i32 = 0;
            loop {
                if local_fill_idx >= locals_count {
                    break;
                };
                let slot_ptr: i32 = env_ptr + (callee_param_count + local_fill_idx) * 8;
                store_i32(slot_ptr, 0);
                store_i32(slot_ptr + 4, -1);
                local_fill_idx = local_fill_idx + 1;
            };
        };
        let body_status: i32 = interpret_constant_expression(
            ast_base,
            body_expr_index,
            scratch_base,
            scratch_top_ptr,
            out_value_ptr,
            out_type_ptr,
            env_ptr,
            callee_param_count,
            env_total,
        );
        if body_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if body_status == CONST_EVAL_STATUS_BREAK
            || body_status == CONST_EVAL_STATUS_CONTINUE
        {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let call_type: i32 = ast_expr_type(ast_base, expr_index);
        let result_type: i32 = load_i32(out_type_ptr);
        if call_type >= 0 && result_type >= 0 {
            if call_type != result_type {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
        };
        store_i32(scratch_top_ptr, saved_top);
        if body_status == CONST_EVAL_STATUS_RETURN {
            return CONST_EVAL_STATUS_OK;
        };
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 9 {
        if param_values_ptr < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if env_values_count <= 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let local_index: i32 = load_i32(entry_ptr + 4);
        if local_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if local_index < param_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if local_index >= env_values_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let init_index: i32 = load_i32(entry_ptr + 8);
        let body_index: i32 = load_i32(entry_ptr + 12);
        if init_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if body_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let local_ptr: i32 = param_values_ptr + local_index * 8;
        let local_type_ptr: i32 = local_ptr + 4;
        let init_status: i32 = interpret_constant_expression(
            ast_base,
            init_index,
            scratch_base,
            scratch_top_ptr,
            local_ptr,
            local_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if init_status < 0 {
            store_i32(local_type_ptr, -1);
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if init_status != CONST_EVAL_STATUS_OK {
            store_i32(local_type_ptr, -1);
            store_i32(scratch_top_ptr, saved_top);
            return init_status;
        };
        let body_status: i32 = interpret_constant_expression(
            ast_base,
            body_index,
            scratch_base,
            scratch_top_ptr,
            out_value_ptr,
            out_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if body_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if body_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return body_status;
        };
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 10 {
        if param_values_ptr < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if env_values_count <= 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let local_index: i32 = load_i32(entry_ptr + 4);
        if local_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if local_index < param_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if local_index >= env_values_count {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let value_index: i32 = load_i32(entry_ptr + 8);
        if value_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let local_ptr: i32 = param_values_ptr + local_index * 8;
        let local_type_ptr: i32 = local_ptr + 4;
        let existing_type: i32 = load_i32(local_type_ptr);
        if existing_type < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let value_offset: i32 = load_i32(scratch_top_ptr);
        let value_ptr: i32 = scratch_base + value_offset;
        let value_type_ptr: i32 = value_ptr + 4;
        store_i32(scratch_top_ptr, value_offset + 8);
        let value_status: i32 = interpret_constant_expression(
            ast_base,
            value_index,
            scratch_base,
            scratch_top_ptr,
            value_ptr,
            value_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if value_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if value_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return value_status;
        };
        let new_type: i32 = load_i32(value_type_ptr);
        if new_type != existing_type {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let new_value: i32 = load_i32(value_ptr);
        store_i32(local_ptr, new_value);
        store_i32(local_type_ptr, new_type);
        store_i32(out_value_ptr, new_value);
        store_i32(out_type_ptr, new_type);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 11 {
        let first_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        if first_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if then_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let first_offset: i32 = load_i32(scratch_top_ptr);
        let first_value_ptr: i32 = scratch_base + first_offset;
        let first_type_ptr: i32 = first_value_ptr + 4;
        store_i32(scratch_top_ptr, first_offset + 8);
        let first_status: i32 = interpret_constant_expression(
            ast_base,
            first_index,
            scratch_base,
            scratch_top_ptr,
            first_value_ptr,
            first_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if first_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        store_i32(scratch_top_ptr, first_offset);
        if first_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return first_status;
        };
        let then_status: i32 = interpret_constant_expression(
            ast_base,
            then_index,
            scratch_base,
            scratch_top_ptr,
            out_value_ptr,
            out_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if then_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if then_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return then_status;
        };
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 12 {
        let body_index: i32 = load_i32(entry_ptr + 4);
        if body_index < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let mut iterations: i32 = 0;
        loop {
            if iterations >= CONST_EVAL_LOOP_LIMIT {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            iterations = iterations + 1;
            let body_offset: i32 = load_i32(scratch_top_ptr);
            let body_value_ptr: i32 = scratch_base + body_offset;
            let body_type_ptr: i32 = body_value_ptr + 4;
            store_i32(scratch_top_ptr, body_offset + 8);
            let body_status: i32 = interpret_constant_expression(
                ast_base,
                body_index,
                scratch_base,
                scratch_top_ptr,
                body_value_ptr,
                body_type_ptr,
                param_values_ptr,
                param_count,
                env_values_count,
            );
            if body_status < 0 {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            store_i32(scratch_top_ptr, body_offset);
            if body_status == CONST_EVAL_STATUS_OK {
                continue;
            };
            if body_status == CONST_EVAL_STATUS_CONTINUE {
                continue;
            };
            if body_status == CONST_EVAL_STATUS_BREAK {
                store_i32(out_value_ptr, load_i32(body_value_ptr));
                store_i32(out_type_ptr, load_i32(body_type_ptr));
                store_i32(scratch_top_ptr, saved_top);
                return CONST_EVAL_STATUS_OK;
            };
            if body_status == CONST_EVAL_STATUS_RETURN {
                store_i32(out_value_ptr, load_i32(body_value_ptr));
                store_i32(out_type_ptr, load_i32(body_type_ptr));
                store_i32(scratch_top_ptr, saved_top);
                return CONST_EVAL_STATUS_RETURN;
            };
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
    };
    if kind == 2
        || kind == 3
        || kind == 4
        || kind == 25
        || kind == 26
        || kind == 27
        || kind == 28
    {
        let result_type: i32 = ast_expr_type(ast_base, expr_index);
        let mut target_type: i32 = result_type;
        if target_type >= 0 {
            if !constant_eval_integer_type_supported(target_type) {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
        };
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let left_offset: i32 = load_i32(scratch_top_ptr);
        let left_value_ptr: i32 = scratch_base + left_offset;
        let left_type_ptr: i32 = left_value_ptr + 4;
        store_i32(scratch_top_ptr, left_offset + 8);
        let left_status: i32 = interpret_constant_expression(
            ast_base,
            left_index,
            scratch_base,
            scratch_top_ptr,
            left_value_ptr,
            left_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if left_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if left_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return left_status;
        };
        let right_offset: i32 = load_i32(scratch_top_ptr);
        let right_value_ptr: i32 = scratch_base + right_offset;
        let right_type_ptr: i32 = right_value_ptr + 4;
        store_i32(scratch_top_ptr, right_offset + 8);
        let right_status: i32 = interpret_constant_expression(
            ast_base,
            right_index,
            scratch_base,
            scratch_top_ptr,
            right_value_ptr,
            right_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if right_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if right_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return right_status;
        };
        let left_type: i32 = load_i32(left_type_ptr);
        let right_type: i32 = load_i32(right_type_ptr);
        if target_type >= 0 {
            if left_type != target_type {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            if right_type != target_type {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
        } else {
            if left_type != right_type {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            if !constant_eval_integer_type_supported(left_type) {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            target_type = left_type;
        };
        let left_value: i32 = normalize_integer_value(load_i32(left_value_ptr), target_type);
        let right_value: i32 = normalize_integer_value(load_i32(right_value_ptr), target_type);
        let mut computed: i32 = 0;
        if kind == 2 {
            computed = left_value + right_value;
        } else if kind == 3 {
            computed = left_value - right_value;
        } else if kind == 4 {
            computed = left_value * right_value;
        } else if kind == 25 {
            computed = left_value | right_value;
        } else if kind == 26 {
            computed = left_value & right_value;
        } else if kind == 27 {
            let shift_amount: i32 = right_value & 31;
            computed = left_value << shift_amount;
        } else {
            let shift_amount: i32 = right_value & 31;
            if type_id_is_signed_integer(result_type) {
                computed = left_value >> shift_amount;
            } else {
                computed = logical_shr(left_value, shift_amount);
            };
        };
        let normalized: i32 = normalize_integer_value(computed, target_type);
        store_i32(out_value_ptr, normalized);
        store_i32(out_type_ptr, target_type);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 14
        || kind == 15
        || kind == 16
        || kind == 17
        || kind == 18
        || kind == 19
    {
        let result_type: i32 = ast_expr_type(ast_base, expr_index);
        if result_type != BUILTIN_TYPE_ID_BOOL {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let left_offset: i32 = load_i32(scratch_top_ptr);
        let left_value_ptr: i32 = scratch_base + left_offset;
        let left_type_ptr: i32 = left_value_ptr + 4;
        store_i32(scratch_top_ptr, left_offset + 8);
        let left_status: i32 = interpret_constant_expression(
            ast_base,
            left_index,
            scratch_base,
            scratch_top_ptr,
            left_value_ptr,
            left_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if left_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if left_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return left_status;
        };
        let right_offset: i32 = load_i32(scratch_top_ptr);
        let right_value_ptr: i32 = scratch_base + right_offset;
        let right_type_ptr: i32 = right_value_ptr + 4;
        store_i32(scratch_top_ptr, right_offset + 8);
        let right_status: i32 = interpret_constant_expression(
            ast_base,
            right_index,
            scratch_base,
            scratch_top_ptr,
            right_value_ptr,
            right_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if right_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if right_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return right_status;
        };
        let value_type: i32 = load_i32(left_type_ptr);
        if value_type != load_i32(right_type_ptr) {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if !constant_eval_integer_type_supported(value_type) {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let left_value: i32 = normalize_integer_value(load_i32(left_value_ptr), value_type);
        let right_value: i32 = normalize_integer_value(load_i32(right_value_ptr), value_type);
        let mut bool_result: i32 = 0;
        if kind == 14 {
            bool_result = if left_value == right_value { 1 } else { 0 };
        } else if kind == 15 {
            bool_result = if left_value != right_value { 1 } else { 0 };
        } else {
            let signed: bool = type_id_is_signed_integer(value_type);
            if kind == 16 {
                if signed {
                    bool_result = if left_value < right_value { 1 } else { 0 };
                } else {
                    let cmp: i32 = compare_unsigned(left_value, right_value);
                    bool_result = if cmp < 0 { 1 } else { 0 };
                };
            } else if kind == 17 {
                if signed {
                    bool_result = if left_value > right_value { 1 } else { 0 };
                } else {
                    let cmp: i32 = compare_unsigned(left_value, right_value);
                    bool_result = if cmp > 0 { 1 } else { 0 };
                };
            } else if kind == 18 {
                if signed {
                    bool_result = if left_value <= right_value { 1 } else { 0 };
                } else {
                    let cmp: i32 = compare_unsigned(left_value, right_value);
                    bool_result = if cmp <= 0 { 1 } else { 0 };
                };
            } else {
                if signed {
                    bool_result = if left_value >= right_value { 1 } else { 0 };
                } else {
                    let cmp: i32 = compare_unsigned(left_value, right_value);
                    bool_result = if cmp >= 0 { 1 } else { 0 };
                };
            };
        };
        store_i32(out_value_ptr, bool_result);
        store_i32(out_type_ptr, BUILTIN_TYPE_ID_BOOL);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 20 || kind == 21 {
        let result_type: i32 = ast_expr_type(ast_base, expr_index);
        if result_type != BUILTIN_TYPE_ID_BOOL {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let left_offset: i32 = load_i32(scratch_top_ptr);
        let left_value_ptr: i32 = scratch_base + left_offset;
        let left_type_ptr: i32 = left_value_ptr + 4;
        store_i32(scratch_top_ptr, left_offset + 8);
        let left_status: i32 = interpret_constant_expression(
            ast_base,
            left_index,
            scratch_base,
            scratch_top_ptr,
            left_value_ptr,
            left_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if left_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if left_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return left_status;
        };
        if load_i32(left_type_ptr) != BUILTIN_TYPE_ID_BOOL {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let left_bool: i32 = if load_i32(left_value_ptr) != 0 { 1 } else { 0 };
        if kind == 20 {
            if left_bool != 0 {
                store_i32(out_value_ptr, 1);
                store_i32(out_type_ptr, BUILTIN_TYPE_ID_BOOL);
                store_i32(scratch_top_ptr, saved_top);
                return CONST_EVAL_STATUS_OK;
            };
        } else {
            if left_bool == 0 {
                store_i32(out_value_ptr, 0);
                store_i32(out_type_ptr, BUILTIN_TYPE_ID_BOOL);
                store_i32(scratch_top_ptr, saved_top);
                return CONST_EVAL_STATUS_OK;
            };
        };
        let right_offset: i32 = load_i32(scratch_top_ptr);
        let right_value_ptr: i32 = scratch_base + right_offset;
        let right_type_ptr: i32 = right_value_ptr + 4;
        store_i32(scratch_top_ptr, right_offset + 8);
        let right_status: i32 = interpret_constant_expression(
            ast_base,
            right_index,
            scratch_base,
            scratch_top_ptr,
            right_value_ptr,
            right_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if right_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if right_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return right_status;
        };
        if load_i32(right_type_ptr) != BUILTIN_TYPE_ID_BOOL {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let right_bool: i32 = if load_i32(right_value_ptr) != 0 { 1 } else { 0 };
        store_i32(out_value_ptr, right_bool);
        store_i32(out_type_ptr, BUILTIN_TYPE_ID_BOOL);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 22 {
        let result_type: i32 = ast_expr_type(ast_base, expr_index);
        if result_type != BUILTIN_TYPE_ID_BOOL {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let value_index: i32 = load_i32(entry_ptr + 4);
        let value_offset: i32 = load_i32(scratch_top_ptr);
        let value_ptr: i32 = scratch_base + value_offset;
        let value_type_ptr: i32 = value_ptr + 4;
        store_i32(scratch_top_ptr, value_offset + 8);
        let value_status: i32 = interpret_constant_expression(
            ast_base,
            value_index,
            scratch_base,
            scratch_top_ptr,
            value_ptr,
            value_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if value_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if value_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return value_status;
        };
        if load_i32(value_type_ptr) != BUILTIN_TYPE_ID_BOOL {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let value_bool: i32 = if load_i32(value_ptr) != 0 { 1 } else { 0 };
        store_i32(out_value_ptr, if value_bool == 0 { 1 } else { 0 });
        store_i32(out_type_ptr, BUILTIN_TYPE_ID_BOOL);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 39 {
        let target_type: i32 = load_i32(entry_ptr + 8);
        if !constant_eval_integer_type_supported(target_type) {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let value_index: i32 = load_i32(entry_ptr + 4);
        let value_offset: i32 = load_i32(scratch_top_ptr);
        let value_ptr: i32 = scratch_base + value_offset;
        let value_type_ptr: i32 = value_ptr + 4;
        store_i32(scratch_top_ptr, value_offset + 8);
        let value_status: i32 = interpret_constant_expression(
            ast_base,
            value_index,
            scratch_base,
            scratch_top_ptr,
            value_ptr,
            value_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if value_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if value_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return value_status;
        };
        let source_type: i32 = load_i32(value_type_ptr);
        if !constant_eval_integer_type_supported(source_type) {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        let value: i32 = normalize_integer_value(load_i32(value_ptr), source_type);
        let cast_value: i32 = normalize_integer_value(value, target_type);
        store_i32(out_value_ptr, cast_value);
        store_i32(out_type_ptr, target_type);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_OK;
    };
    if kind == 13 {
        let value_index: i32 = load_i32(entry_ptr + 8);
        if value_index >= 0 {
            let value_offset: i32 = load_i32(scratch_top_ptr);
            let value_ptr: i32 = scratch_base + value_offset;
            let value_type_ptr: i32 = value_ptr + 4;
            store_i32(scratch_top_ptr, value_offset + 8);
            let value_status: i32 = interpret_constant_expression(
                ast_base,
                value_index,
                scratch_base,
                scratch_top_ptr,
                value_ptr,
                value_type_ptr,
                param_values_ptr,
                param_count,
                env_values_count,
            );
            if value_status < 0 {
                store_i32(scratch_top_ptr, saved_top);
                return -1;
            };
            if value_status != CONST_EVAL_STATUS_OK {
                store_i32(scratch_top_ptr, saved_top);
                return value_status;
            };
            store_i32(out_value_ptr, load_i32(value_ptr));
            store_i32(out_type_ptr, load_i32(value_type_ptr));
        } else {
            store_i32(out_value_ptr, 0);
            store_i32(out_type_ptr, -1);
        };
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_BREAK;
    };
    if kind == 24 {
        store_i32(out_value_ptr, 0);
        store_i32(out_type_ptr, -1);
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_CONTINUE;
    };
    if kind == 23 {
        let value_index: i32 = load_i32(entry_ptr + 4);
        let value_offset: i32 = load_i32(scratch_top_ptr);
        let value_ptr: i32 = scratch_base + value_offset;
        let value_type_ptr: i32 = value_ptr + 4;
        store_i32(scratch_top_ptr, value_offset + 8);
        let value_status: i32 = interpret_constant_expression(
            ast_base,
            value_index,
            scratch_base,
            scratch_top_ptr,
            value_ptr,
            value_type_ptr,
            param_values_ptr,
            param_count,
            env_values_count,
        );
        if value_status < 0 {
            store_i32(scratch_top_ptr, saved_top);
            return -1;
        };
        if value_status != CONST_EVAL_STATUS_OK {
            store_i32(scratch_top_ptr, saved_top);
            return value_status;
        };
        store_i32(out_value_ptr, load_i32(value_ptr));
        store_i32(out_type_ptr, load_i32(value_type_ptr));
        store_i32(scratch_top_ptr, saved_top);
        return CONST_EVAL_STATUS_RETURN;
    };
    store_i32(scratch_top_ptr, saved_top);
    -1
}
