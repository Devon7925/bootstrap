fn write_byte(base: i32, offset: i32, value: i32) -> i32 {
    store_u8(base + offset, value & 255);
    offset + 1
}

fn write_u32_leb(base: i32, offset: i32, value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut out: i32 = offset;
    loop {
        let mut byte: i32 = remaining & 127;
        remaining = remaining >> 7;
        if remaining != 0 {
            byte = byte | 128;
        };
        out = write_byte(base, out, byte);
        if remaining == 0 {
            break;
        };
    };
    out
}

fn write_i32_leb(base: i32, offset: i32, value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut out: i32 = offset;
    loop {
        let byte: i32 = remaining & 127;
        remaining = remaining >> 7;
        let sign_bit: i32 = byte & 64;
        let done: bool = (remaining == 0 && sign_bit == 0) || (remaining == -1 && sign_bit != 0);
        let mut out_byte: i32 = byte;
        if !done {
            out_byte = out_byte | 128;
        };
        out = write_byte(base, out, out_byte);
        if done {
            break;
        };
    };
    out
}

fn leb_u32_len(value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut count: i32 = 0;
    loop {
        count = count + 1;
        remaining = remaining >> 7;
        if remaining == 0 {
            break;
        };
    };
    count
}

fn leb_i32_len(value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut count: i32 = 0;
    loop {
        let byte: i32 = remaining & 127;
        remaining = remaining >> 7;
        let sign_bit: i32 = byte & 64;
        let done: bool = (remaining == 0 && sign_bit == 0) || (remaining == -1 && sign_bit != 0);
        count = count + 1;
        if done {
            break;
        };
    };
    count
}

fn write_magic(base: i32, offset: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 0);
    out = write_byte(base, out, 97);
    out = write_byte(base, out, 115);
    out = write_byte(base, out, 109);
    out = write_byte(base, out, 1);
    out = write_byte(base, out, 0);
    out = write_byte(base, out, 0);
    out = write_byte(base, out, 0);
    out
}

fn is_whitespace(byte: i32) -> bool {
    byte == 32 || byte == 9 || byte == 10 || byte == 13
}

fn skip_whitespace(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = offset;
    loop {
        if idx >= len {
            break;
        };
        let byte: i32 = load_u8(base + idx);
        if byte == 47 {
            if idx + 1 < len {
                let next: i32 = load_u8(base + idx + 1);
                if next == 47 {
                    idx = idx + 2;
                    loop {
                        if idx >= len {
                            break;
                        };
                        let comment_byte: i32 = load_u8(base + idx);
                        if comment_byte == 10 {
                            idx = idx + 1;
                            break;
                        };
                        idx = idx + 1;
                    };
                    continue;
                };
            };
        };
        if !is_whitespace(byte) {
            break;
        };
        idx = idx + 1;
    };
    idx
}

fn expect_char(base: i32, len: i32, offset: i32, expected: i32) -> i32 {
    if offset >= len {
        return -1;
    };
    let byte: i32 = load_u8(base + offset);
    if byte != expected {
        return -1;
    };
    offset + 1
}

fn is_identifier_start(byte: i32) -> bool {
    (byte >= 65 && byte <= 90) || (byte >= 97 && byte <= 122) || byte == 95
}

fn is_digit(byte: i32) -> bool {
    byte >= 48 && byte <= 57
}

fn is_identifier_continue(byte: i32) -> bool {
    is_identifier_start(byte) || is_digit(byte)
}

fn expect_keyword_fn(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 1 >= len {
        return -1;
    };
    let first: i32 = load_u8(base + offset);
    let second: i32 = load_u8(base + offset + 1);
    if first != 102 || second != 110 {
        return -1;
    };
    let next: i32 = offset + 2;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn expect_keyword_if(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 1 >= len {
        return -1;
    };
    let first: i32 = load_u8(base + offset);
    let second: i32 = load_u8(base + offset + 1);
    if first != 105 || second != 102 {
        return -1;
    };
    let next: i32 = offset + 2;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn expect_keyword_true(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 4 > len {
        return -1;
    };
    let t: i32 = load_u8(base + offset);
    let r: i32 = load_u8(base + offset + 1);
    let u: i32 = load_u8(base + offset + 2);
    let e: i32 = load_u8(base + offset + 3);
    if t != 116 || r != 114 || u != 117 || e != 101 {
        return -1;
    };
    let next: i32 = offset + 4;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn expect_keyword_false(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 5 > len {
        return -1;
    };
    let f: i32 = load_u8(base + offset);
    let a: i32 = load_u8(base + offset + 1);
    let l: i32 = load_u8(base + offset + 2);
    let s: i32 = load_u8(base + offset + 3);
    let e: i32 = load_u8(base + offset + 4);
    if f != 102 || a != 97 || l != 108 || s != 115 || e != 101 {
        return -1;
    };
    let next: i32 = offset + 5;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn expect_keyword_else(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 3 >= len {
        return -1;
    };
    let e: i32 = load_u8(base + offset);
    let l: i32 = load_u8(base + offset + 1);
    let s: i32 = load_u8(base + offset + 2);
    let e2: i32 = load_u8(base + offset + 3);
    if e != 101 || l != 108 || s != 115 || e2 != 101 {
        return -1;
    };
    let next: i32 = offset + 4;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn expect_keyword_loop(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 3 >= len {
        return -1;
    };
    let l: i32 = load_u8(base + offset);
    let o1: i32 = load_u8(base + offset + 1);
    let o2: i32 = load_u8(base + offset + 2);
    let p: i32 = load_u8(base + offset + 3);
    if l != 108 || o1 != 111 || o2 != 111 || p != 112 {
        return -1;
    };
    let next: i32 = offset + 4;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn expect_keyword_break(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 4 >= len {
        return -1;
    };
    let b: i32 = load_u8(base + offset);
    let r: i32 = load_u8(base + offset + 1);
    let e: i32 = load_u8(base + offset + 2);
    let a: i32 = load_u8(base + offset + 3);
    let k: i32 = load_u8(base + offset + 4);
    if b != 98 || r != 114 || e != 101 || a != 97 || k != 107 {
        return -1;
    };
    let next: i32 = offset + 5;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn expect_keyword_return(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 5 >= len {
        return -1;
    };
    let r: i32 = load_u8(base + offset);
    let e: i32 = load_u8(base + offset + 1);
    let t: i32 = load_u8(base + offset + 2);
    let u: i32 = load_u8(base + offset + 3);
    let r2: i32 = load_u8(base + offset + 4);
    let n: i32 = load_u8(base + offset + 5);
    if r != 114 || e != 101 || t != 116 || u != 117 || r2 != 114 || n != 110 {
        return -1;
    };
    let next: i32 = offset + 6;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn parse_identifier(base: i32, len: i32, offset: i32, out_start_ptr: i32, out_len_ptr: i32) -> i32 {
    if offset >= len {
        return -1;
    };
    let first: i32 = load_u8(base + offset);
    if !is_identifier_start(first) {
        return -1;
    };
    let mut idx: i32 = offset + 1;
    loop {
        if idx >= len {
            break;
        };
        let byte: i32 = load_u8(base + idx);
        if !is_identifier_continue(byte) {
            break;
        };
        idx = idx + 1;
    };
    store_i32(out_start_ptr, offset);
    store_i32(out_len_ptr, idx - offset);
    idx
}

fn max_params() -> i32 {
    16
}

fn identifiers_match_source(
    base: i32,
    start_a: i32,
    len_a: i32,
    start_b: i32,
    len_b: i32,
) -> bool {
    if len_a != len_b {
        return false;
    };
    let mut idx: i32 = 0;
    loop {
        if idx >= len_a {
            break;
        };
        let a_byte: i32 = load_u8(base + start_a + idx);
        let b_byte: i32 = load_u8(base + start_b + idx);
        if a_byte != b_byte {
            return false;
        };
        idx = idx + 1;
    };
    true
}

fn find_parameter_index(
    base: i32,
    params_table_ptr: i32,
    params_count: i32,
    ident_start: i32,
    ident_len: i32,
) -> i32 {
    let mut idx: i32 = 0;
    loop {
        if idx >= params_count {
            break;
        };
        let entry_ptr: i32 = params_table_ptr + idx * 8;
        let param_start: i32 = load_i32(entry_ptr);
        let param_len: i32 = load_i32(entry_ptr + 4);
        if identifiers_match_source(base, param_start, param_len, ident_start, ident_len) {
            return idx;
        };
        idx = idx + 1;
    };
    -1
}

fn expect_keyword_let(base: i32, len: i32, offset: i32) -> i32 {
    if offset + 2 >= len {
        return -1;
    };
    let l: i32 = load_u8(base + offset);
    let e: i32 = load_u8(base + offset + 1);
    let t: i32 = load_u8(base + offset + 2);
    if l != 108 || e != 101 || t != 116 {
        return -1;
    };
    let next: i32 = offset + 3;
    if next < len {
        let after: i32 = load_u8(base + next);
        if is_identifier_continue(after) {
            return -1;
        };
    };
    next
}

fn max_locals() -> i32 {
    64
}

fn locals_entry_size() -> i32 {
    16
}

fn locals_entry_ptr(locals_table_ptr: i32, index: i32) -> i32 {
    locals_table_ptr + index * locals_entry_size()
}

fn find_local_entry_index(
    base: i32,
    locals_table_ptr: i32,
    locals_stack_count: i32,
    ident_start: i32,
    ident_len: i32,
) -> i32 {
    if locals_stack_count <= 0 {
        return -1;
    };
    let mut idx: i32 = locals_stack_count - 1;
    loop {
        if idx < 0 {
            break;
        };
        let entry_ptr: i32 = locals_entry_ptr(locals_table_ptr, idx);
        let local_start: i32 = load_i32(entry_ptr);
        let local_len: i32 = load_i32(entry_ptr + 4);
        if identifiers_match_source(base, local_start, local_len, ident_start, ident_len) {
            return idx;
        };
        idx = idx - 1;
    };
    -1
}

fn find_local_entry_index_in_scope(
    base: i32,
    locals_table_ptr: i32,
    scope_start: i32,
    locals_stack_count: i32,
    ident_start: i32,
    ident_len: i32,
) -> i32 {
    if locals_stack_count <= scope_start {
        return -1;
    };
    let mut idx: i32 = locals_stack_count - 1;
    loop {
        if idx < scope_start {
            break;
        };
        let entry_ptr: i32 = locals_entry_ptr(locals_table_ptr, idx);
        let local_start: i32 = load_i32(entry_ptr);
        let local_len: i32 = load_i32(entry_ptr + 4);
        if identifiers_match_source(base, local_start, local_len, ident_start, ident_len) {
            return idx;
        };
        idx = idx - 1;
    };
    -1
}

fn locals_entry_local_index(entry_ptr: i32) -> i32 {
    load_i32(entry_ptr + 8)
}

fn locals_entry_is_mut(entry_ptr: i32) -> bool {
    load_i32(entry_ptr + 12) != 0
}

fn block_statement_entry_size() -> i32 {
    12
}

fn block_statements_capacity() -> i32 {
    128
}

fn parse_block_expression_body(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    literal_ptr: i32,
    ident_start_ptr: i32,
    ident_len_ptr: i32,
    temp_base: i32,
    allow_empty_final_expr: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    let saved_stack_count: i32 = load_i32(locals_stack_count_ptr);
    let saved_next_index: i32 = load_i32(locals_next_index_ptr);
    let mut idx: i32 = skip_whitespace(base, len, cursor);

    let statement_count_ptr: i32 = temp_base;
    store_i32(statement_count_ptr, 0);
    let statements_base: i32 = statement_count_ptr + 4;
    let statements_capacity: i32 = block_statements_capacity();
    let statement_entry_size: i32 = block_statement_entry_size();
    let statements_end: i32 = statements_base + statements_capacity * statement_entry_size;
    let stmt_expr_kind_ptr: i32 = statements_end;
    let stmt_expr_data0_ptr: i32 = stmt_expr_kind_ptr + 4;
    let stmt_expr_data1_ptr: i32 = stmt_expr_kind_ptr + 8;
    let stmt_nested_temp_base: i32 = stmt_expr_kind_ptr + 32;

    let allow_empty_value: bool = allow_empty_final_expr != 0;
    let mut have_value_expr: bool = false;
    let mut final_kind: i32 = -1;
    let mut final_data0: i32 = 0;
    let mut final_data1: i32 = 0;

    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            store_i32(locals_stack_count_ptr, saved_stack_count);
            store_i32(locals_next_index_ptr, saved_next_index);
            return -1;
        };
        let next_byte: i32 = load_u8(base + idx);
        if next_byte == 125 {
            if !have_value_expr {
                if allow_empty_value {
                    have_value_expr = true;
                    final_kind = 0;
                    final_data0 = 0;
                    final_data1 = 0;
                } else {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
            };
            idx = idx + 1;
            idx = skip_whitespace(base, len, idx);
            break;
        };
        if have_value_expr {
            store_i32(locals_stack_count_ptr, saved_stack_count);
            store_i32(locals_next_index_ptr, saved_next_index);
            return -1;
        };

        let mut handled_statement: bool = false;
        let mut let_cursor: i32 = expect_keyword_let(base, len, idx);
        if let_cursor >= 0 {
            if let_cursor >= len {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let after_keyword: i32 = load_u8(base + let_cursor);
            if !is_whitespace(after_keyword) {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            idx = skip_whitespace(base, len, let_cursor);
            let mut is_mut: bool = false;
            if idx + 3 <= len {
                let m: i32 = load_u8(base + idx);
                if m == 109 {
                    let u: i32 = load_u8(base + idx + 1);
                    let t: i32 = load_u8(base + idx + 2);
                    if u == 117 && t == 116 {
                        let after_mut: i32 = idx + 3;
                        if after_mut >= len {
                            store_i32(locals_stack_count_ptr, saved_stack_count);
                            store_i32(locals_next_index_ptr, saved_next_index);
                            return -1;
                        };
                        let after_mut_byte: i32 = load_u8(base + after_mut);
                        if is_whitespace(after_mut_byte) {
                            is_mut = true;
                            idx = skip_whitespace(base, len, after_mut);
                        };
                    };
                };
            };

            idx = parse_identifier(base, len, idx, ident_start_ptr, ident_len_ptr);
            if idx < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let name_start: i32 = load_i32(ident_start_ptr);
            let name_len: i32 = load_i32(ident_len_ptr);

            let current_stack: i32 = load_i32(locals_stack_count_ptr);
            let existing: i32 = find_local_entry_index_in_scope(
                base,
                locals_table_ptr,
                saved_stack_count,
                current_stack,
                name_start,
                name_len,
            );
            if existing >= 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };

            idx = skip_whitespace(base, len, idx);
            idx = expect_char(base, len, idx, 58);
            if idx < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            idx = skip_whitespace(base, len, idx);
            idx = parse_type(base, len, idx, -1);
            if idx < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            idx = skip_whitespace(base, len, idx);
            idx = expect_char(base, len, idx, 61);
            if idx < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            idx = skip_whitespace(base, len, idx);
            idx = parse_expression(
                base,
                len,
                idx,
                ast_base,
                params_table_ptr,
                params_count,
                locals_table_ptr,
                locals_stack_count_ptr,
                locals_next_index_ptr,
                stmt_nested_temp_base,
                loop_depth_ptr,
                stmt_expr_kind_ptr,
                stmt_expr_data0_ptr,
                stmt_expr_data1_ptr,
            );
            if idx < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let init_kind: i32 = load_i32(stmt_expr_kind_ptr);
            let init_data0: i32 = load_i32(stmt_expr_data0_ptr);
            let init_data1: i32 = load_i32(stmt_expr_data1_ptr);
            let init_index: i32 =
                expression_node_from_parts(ast_base, init_kind, init_data0, init_data1);
            if init_index < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            idx = skip_whitespace(base, len, idx);
            idx = expect_char(base, len, idx, 59);
            if idx < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };

            let stack_count: i32 = load_i32(locals_stack_count_ptr);
            if stack_count >= max_locals() {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let next_local_offset: i32 = load_i32(locals_next_index_ptr);
            if next_local_offset >= max_locals() {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let local_index: i32 = params_count + next_local_offset;
            let entry_ptr: i32 = locals_entry_ptr(locals_table_ptr, stack_count);
            store_i32(entry_ptr, name_start);
            store_i32(entry_ptr + 4, name_len);
            store_i32(entry_ptr + 8, local_index);
            store_i32(entry_ptr + 12, if is_mut { 1 } else { 0 });
            store_i32(locals_stack_count_ptr, stack_count + 1);
            store_i32(locals_next_index_ptr, next_local_offset + 1);

            let stmt_count: i32 = load_i32(statement_count_ptr);
            if stmt_count >= statements_capacity {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let stmt_ptr: i32 = statements_base + stmt_count * statement_entry_size;
            store_i32(stmt_ptr, 0);
            store_i32(stmt_ptr + 4, local_index);
            store_i32(stmt_ptr + 8, init_index);
            store_i32(statement_count_ptr, stmt_count + 1);
            handled_statement = true;
        };

        if handled_statement {
            continue;
        };

        let mut expression_parsed: bool = false;

        let mut break_cursor: i32 = expect_keyword_break(base, len, idx);
        if break_cursor >= 0 {
            let current_loop_depth: i32 = load_i32(loop_depth_ptr);
            if current_loop_depth <= 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let mut after_break: i32 = skip_whitespace(base, len, break_cursor);
            if after_break >= len {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let mut value_index: i32 = -1;
            let after_byte: i32 = load_u8(base + after_break);
            if after_byte != 59 {
                after_break = parse_expression(
                    base,
                    len,
                    after_break,
                    ast_base,
                    params_table_ptr,
                    params_count,
                    locals_table_ptr,
                    locals_stack_count_ptr,
                    locals_next_index_ptr,
                    stmt_nested_temp_base,
                    loop_depth_ptr,
                    stmt_expr_kind_ptr,
                    stmt_expr_data0_ptr,
                    stmt_expr_data1_ptr,
                );
                if after_break < 0 {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
                let value_kind: i32 = load_i32(stmt_expr_kind_ptr);
                let value_data0: i32 = load_i32(stmt_expr_data0_ptr);
                let value_data1: i32 = load_i32(stmt_expr_data1_ptr);
                value_index = expression_node_from_parts(
                    ast_base,
                    value_kind,
                    value_data0,
                    value_data1,
                );
                if value_index < 0 {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
                after_break = skip_whitespace(base, len, after_break);
                after_break = expect_char(base, len, after_break, 59);
                if after_break < 0 {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
            } else {
                after_break = skip_whitespace(base, len, after_break + 1);
            };
            let break_expr_index: i32 = ast_expr_alloc_break(ast_base, value_index);
            if break_expr_index < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let stmt_count: i32 = load_i32(statement_count_ptr);
            if stmt_count >= statements_capacity {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let stmt_ptr: i32 = statements_base + stmt_count * statement_entry_size;
            store_i32(stmt_ptr, 1);
            store_i32(stmt_ptr + 4, break_expr_index);
            store_i32(stmt_ptr + 8, 0);
            store_i32(statement_count_ptr, stmt_count + 1);
            idx = after_break;
            continue;
        };

        let mut return_cursor: i32 = expect_keyword_return(base, len, idx);
        if return_cursor >= 0 {
            let mut after_return: i32 = skip_whitespace(base, len, return_cursor);
            after_return = parse_expression(
                base,
                len,
                after_return,
                ast_base,
                params_table_ptr,
                params_count,
                locals_table_ptr,
                locals_stack_count_ptr,
                locals_next_index_ptr,
                stmt_nested_temp_base,
                loop_depth_ptr,
                stmt_expr_kind_ptr,
                stmt_expr_data0_ptr,
                stmt_expr_data1_ptr,
            );
            if after_return < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let value_kind: i32 = load_i32(stmt_expr_kind_ptr);
            let value_data0: i32 = load_i32(stmt_expr_data0_ptr);
            let value_data1: i32 = load_i32(stmt_expr_data1_ptr);
            let value_index: i32 = expression_node_from_parts(
                ast_base,
                value_kind,
                value_data0,
                value_data1,
            );
            if value_index < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            after_return = skip_whitespace(base, len, after_return);
            after_return = expect_char(base, len, after_return, 59);
            if after_return < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let return_expr_index: i32 = ast_expr_alloc_return(ast_base, value_index);
            if return_expr_index < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            have_value_expr = true;
            final_kind = 23;
            final_data0 = return_expr_index;
            final_data1 = 0;
            idx = skip_whitespace(base, len, after_return);
            continue;
        };

        let mut loop_cursor: i32 = expect_keyword_loop(base, len, idx);
        if loop_cursor >= 0 {
            let mut after_loop: i32 = skip_whitespace(base, len, loop_cursor);
            after_loop = expect_char(base, len, after_loop, 123);
            if after_loop < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let saved_loop_depth: i32 = load_i32(loop_depth_ptr);
            store_i32(loop_depth_ptr, saved_loop_depth + 1);
            after_loop = parse_block_expression_body(
                base,
                len,
                after_loop,
                ast_base,
                params_table_ptr,
                params_count,
                locals_table_ptr,
                locals_stack_count_ptr,
                locals_next_index_ptr,
                literal_ptr,
                ident_start_ptr,
                ident_len_ptr,
                stmt_nested_temp_base,
                1,
                loop_depth_ptr,
                stmt_expr_kind_ptr,
                stmt_expr_data0_ptr,
                stmt_expr_data1_ptr,
            );
            if after_loop < 0 {
                store_i32(loop_depth_ptr, saved_loop_depth);
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            store_i32(loop_depth_ptr, saved_loop_depth);
            let body_kind: i32 = load_i32(stmt_expr_kind_ptr);
            let body_data0: i32 = load_i32(stmt_expr_data0_ptr);
            let body_data1: i32 = load_i32(stmt_expr_data1_ptr);
            let body_index: i32 = expression_node_from_parts(
                ast_base,
                body_kind,
                body_data0,
                body_data1,
            );
            if body_index < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let loop_expr_index: i32 = ast_expr_alloc_loop(ast_base, body_index);
            if loop_expr_index < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            store_i32(stmt_expr_kind_ptr, 12);
            store_i32(stmt_expr_data0_ptr, loop_expr_index);
            store_i32(stmt_expr_data1_ptr, 0);
            idx = after_loop;
            expression_parsed = true;
        };

        let statement_start: i32 = idx;
        let mut assignment_identified: bool = false;
        let mut assignment_local_index: i32 = -1;
        let mut assignment_cursor: i32 = idx;
        if !expression_parsed {
            if is_identifier_start(next_byte) {
                assignment_cursor = parse_identifier(
                    base,
                    len,
                    idx,
                    ident_start_ptr,
                    ident_len_ptr,
                );
                if assignment_cursor >= 0 {
                    let name_start: i32 = load_i32(ident_start_ptr);
                    let name_len: i32 = load_i32(ident_len_ptr);
                    let mut after_ident: i32 = skip_whitespace(base, len, assignment_cursor);
                    if after_ident < len {
                        let assign_byte: i32 = load_u8(base + after_ident);
                        if assign_byte == 61 {
                            let mut after_equal: i32 = after_ident + 1;
                            if after_equal >= len {
                                store_i32(locals_stack_count_ptr, saved_stack_count);
                                store_i32(locals_next_index_ptr, saved_next_index);
                                return -1;
                            };
                            let maybe_second_equal: i32 = load_u8(base + after_equal);
                            if maybe_second_equal != 61 {
                                let current_stack: i32 = load_i32(locals_stack_count_ptr);
                                let entry_index: i32 = find_local_entry_index(
                                    base,
                                    locals_table_ptr,
                                    current_stack,
                                    name_start,
                                    name_len,
                                );
                                if entry_index < 0 {
                                    store_i32(locals_stack_count_ptr, saved_stack_count);
                                    store_i32(locals_next_index_ptr, saved_next_index);
                                    return -1;
                                };
                                let entry_ptr: i32 = locals_entry_ptr(locals_table_ptr, entry_index);
                                if !locals_entry_is_mut(entry_ptr) {
                                    store_i32(locals_stack_count_ptr, saved_stack_count);
                                    store_i32(locals_next_index_ptr, saved_next_index);
                                    return -1;
                                };
                                assignment_local_index = locals_entry_local_index(entry_ptr);
                                assignment_identified = true;
                                assignment_cursor = skip_whitespace(base, len, after_equal);
                            };
                        };
                    };
                };
            };
        };

        if !expression_parsed {
            idx = statement_start;
            if assignment_identified {
                idx = parse_expression(
                    base,
                    len,
                    assignment_cursor,
                    ast_base,
                    params_table_ptr,
                    params_count,
                    locals_table_ptr,
                    locals_stack_count_ptr,
                    locals_next_index_ptr,
                    stmt_nested_temp_base,
                    loop_depth_ptr,
                    stmt_expr_kind_ptr,
                    stmt_expr_data0_ptr,
                    stmt_expr_data1_ptr,
                );
                if idx < 0 {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
                let value_kind: i32 = load_i32(stmt_expr_kind_ptr);
                let value_data0: i32 = load_i32(stmt_expr_data0_ptr);
                let value_data1: i32 = load_i32(stmt_expr_data1_ptr);
                let value_index: i32 = expression_node_from_parts(
                    ast_base,
                    value_kind,
                    value_data0,
                    value_data1,
                );
                if value_index < 0 {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
                idx = skip_whitespace(base, len, idx);
                idx = expect_char(base, len, idx, 59);
                if idx < 0 {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
                let assign_expr_index: i32 =
                    ast_expr_alloc_set_local(ast_base, assignment_local_index, value_index);
                if assign_expr_index < 0 {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
                let stmt_count: i32 = load_i32(statement_count_ptr);
                if stmt_count >= statements_capacity {
                    store_i32(locals_stack_count_ptr, saved_stack_count);
                    store_i32(locals_next_index_ptr, saved_next_index);
                    return -1;
                };
                let stmt_ptr: i32 = statements_base + stmt_count * statement_entry_size;
                store_i32(stmt_ptr, 1);
                store_i32(stmt_ptr + 4, assign_expr_index);
                store_i32(stmt_ptr + 8, 0);
                store_i32(statement_count_ptr, stmt_count + 1);
                continue;
            };

            idx = parse_expression(
                base,
                len,
                idx,
                ast_base,
                params_table_ptr,
                params_count,
                locals_table_ptr,
                locals_stack_count_ptr,
                locals_next_index_ptr,
                stmt_nested_temp_base,
                loop_depth_ptr,
                stmt_expr_kind_ptr,
                stmt_expr_data0_ptr,
                stmt_expr_data1_ptr,
            );
            if idx < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
        };
        let expr_kind: i32 = load_i32(stmt_expr_kind_ptr);
        let expr_data0: i32 = load_i32(stmt_expr_data0_ptr);
        let expr_data1: i32 = load_i32(stmt_expr_data1_ptr);
        let mut next_cursor: i32 = skip_whitespace(base, len, idx);
        let mut treat_as_statement: bool = false;
        if next_cursor < len {
            let delimiter: i32 = load_u8(base + next_cursor);
            if delimiter == 59 {
                let after_semicolon: i32 = skip_whitespace(base, len, next_cursor + 1);
                if after_semicolon < len {
                    let after_byte: i32 = load_u8(base + after_semicolon);
                    if after_byte == 125 && !have_value_expr {
                        next_cursor = after_semicolon;
                    } else {
                        treat_as_statement = true;
                        next_cursor = after_semicolon;
                    };
                } else {
                    treat_as_statement = true;
                    next_cursor = after_semicolon;
                };
            };
        };
        if !treat_as_statement {
            if expr_kind == 12 {
                if next_cursor < len {
                    let after_byte: i32 = load_u8(base + next_cursor);
                    if after_byte != 125 {
                        treat_as_statement = true;
                    };
                };
            };
        };
        if treat_as_statement {
            let expr_index: i32 = expression_node_from_parts(ast_base, expr_kind, expr_data0, expr_data1);
            if expr_index < 0 {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let stmt_count: i32 = load_i32(statement_count_ptr);
            if stmt_count >= statements_capacity {
                store_i32(locals_stack_count_ptr, saved_stack_count);
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            let stmt_ptr: i32 = statements_base + stmt_count * statement_entry_size;
            store_i32(stmt_ptr, 1);
            store_i32(stmt_ptr + 4, expr_index);
            store_i32(stmt_ptr + 8, 0);
            store_i32(statement_count_ptr, stmt_count + 1);
            idx = next_cursor;
            continue;
        };

        have_value_expr = true;
        final_kind = expr_kind;
        final_data0 = expr_data0;
        final_data1 = expr_data1;
        idx = next_cursor;
    };

    store_i32(locals_stack_count_ptr, saved_stack_count);

    let mut final_index: i32 =
        expression_node_from_parts(ast_base, final_kind, final_data0, final_data1);
    if final_index < 0 {
        store_i32(locals_next_index_ptr, saved_next_index);
        return -1;
    };
    let stmt_count: i32 = load_i32(statement_count_ptr);
    if stmt_count > 0 {
        let mut stmt_idx: i32 = stmt_count - 1;
        loop {
            if stmt_idx < 0 {
                break;
            };
            let stmt_ptr: i32 = statements_base + stmt_idx * statement_entry_size;
            let stmt_kind: i32 = load_i32(stmt_ptr);
            if stmt_kind == 0 {
                let local_index: i32 = load_i32(stmt_ptr + 4);
                let init_index: i32 = load_i32(stmt_ptr + 8);
                final_index = ast_expr_alloc_let(ast_base, local_index, init_index, final_index);
            } else {
                let first_index: i32 = load_i32(stmt_ptr + 4);
                final_index = ast_expr_alloc_sequence(ast_base, first_index, final_index);
            };
            if final_index < 0 {
                store_i32(locals_next_index_ptr, saved_next_index);
                return -1;
            };
            stmt_idx = stmt_idx - 1;
        };
    };

    store_i32(out_kind_ptr, 2);
    store_i32(out_data0_ptr, final_index);
    store_i32(out_data1_ptr, 0);
    idx
}

fn parse_type(base: i32, len: i32, offset: i32, out_type_ptr: i32) -> i32 {
    if offset >= len {
        return -1;
    };
    if offset + 3 <= len {
        let byte0: i32 = load_u8(base + offset);
        let byte1: i32 = load_u8(base + offset + 1);
        let byte2: i32 = load_u8(base + offset + 2);
        if byte0 == 105 && byte1 == 51 && byte2 == 50 {
            let next: i32 = offset + 3;
            if next < len {
                let after: i32 = load_u8(base + next);
                if is_identifier_continue(after) {
                    return -1;
                };
            };
            if out_type_ptr >= 0 {
                store_i32(out_type_ptr, 0);
            };
            return next;
        };
    };
    if offset + 4 <= len {
        let b: i32 = load_u8(base + offset);
        let o: i32 = load_u8(base + offset + 1);
        let o2: i32 = load_u8(base + offset + 2);
        let l: i32 = load_u8(base + offset + 3);
        if b == 98 && o == 111 && o2 == 111 && l == 108 {
            let next: i32 = offset + 4;
            if next < len {
                let after: i32 = load_u8(base + next);
                if is_identifier_continue(after) {
                    return -1;
                };
            };
            if out_type_ptr >= 0 {
                store_i32(out_type_ptr, 1);
            };
            return next;
        };
    };
    -1
}

fn parse_i32_literal(base: i32, len: i32, offset: i32, out_value_ptr: i32) -> i32 {
    if offset >= len {
        return -1;
    };
    let mut idx: i32 = offset;
    let mut sign: i32 = 1;
    let first: i32 = load_u8(base + idx);
    if first == 45 {
        sign = -1;
        idx = idx + 1;
        if idx >= len {
            return -1;
        };
    };
    let mut digits: i32 = 0;
    let mut value: i32 = 0;
    loop {
        if idx >= len {
            break;
        };
        let byte: i32 = load_u8(base + idx);
        if !is_digit(byte) {
            break;
        };
        value = value * 10 + (byte - 48);
        idx = idx + 1;
        digits = digits + 1;
    };
    if digits == 0 {
        return -1;
    };
    store_i32(out_value_ptr, value * sign);
    idx
}

fn word_size() -> i32 {
    4
}

fn scratch_instr_offset() -> i32 {
    4096
}

fn scratch_expr_type_offset() -> i32 {
    4092
}

fn scratch_instr_base_offset() -> i32 {
    8192
}

fn scratch_instr_capacity() -> i32 {
    65536
}

fn scratch_functions_count_offset() -> i32 {
    851960
}

fn scratch_functions_base_offset() -> i32 {
    851968
}

fn type_entry_size() -> i32 {
    16
}

fn scratch_types_capacity() -> i32 {
    2048
}

fn scratch_types_base_offset() -> i32 {
    scratch_functions_base_offset() - scratch_types_capacity() * type_entry_size()
}

fn scratch_types_count_offset() -> i32 {
    scratch_types_base_offset() - word_size()
}

fn scratch_instr_offset_ptr(out_ptr: i32) -> i32 {
    out_ptr + scratch_instr_offset()
}

fn scratch_expr_type_ptr(out_ptr: i32) -> i32 {
    out_ptr + scratch_expr_type_offset()
}

fn scratch_instr_base(out_ptr: i32) -> i32 {
    out_ptr + scratch_instr_base_offset()
}

fn scratch_functions_count_ptr(out_ptr: i32) -> i32 {
    out_ptr + scratch_functions_count_offset()
}

fn scratch_functions_base(out_ptr: i32) -> i32 {
    out_ptr + scratch_functions_base_offset()
}

fn scratch_types_count_ptr(out_ptr: i32) -> i32 {
    out_ptr + scratch_types_count_offset()
}

fn scratch_types_base(out_ptr: i32) -> i32 {
    out_ptr + scratch_types_base_offset()
}

fn ast_max_functions() -> i32 {
    16
}

fn ast_function_entry_size() -> i32 {
    24
}

fn ast_names_capacity() -> i32 {
    512
}

fn ast_call_data_capacity() -> i32 {
    512
}

fn ast_program_base(out_ptr: i32) -> i32 {
    scratch_instr_base(out_ptr)
}

fn ast_functions_count_ptr(ast_base: i32) -> i32 {
    ast_base
}

fn ast_function_entry_ptr(ast_base: i32, index: i32) -> i32 {
    ast_base + word_size() + index * ast_function_entry_size()
}

fn ast_names_len_ptr(ast_base: i32) -> i32 {
    ast_base + word_size() + ast_max_functions() * ast_function_entry_size()
}

fn ast_names_base(ast_base: i32) -> i32 {
    ast_names_len_ptr(ast_base) + word_size()
}

fn ast_call_data_len_ptr(ast_base: i32) -> i32 {
    ast_names_base(ast_base) + ast_names_capacity()
}

fn ast_call_data_base(ast_base: i32) -> i32 {
    ast_call_data_len_ptr(ast_base) + word_size()
}

fn ast_reset(ast_base: i32) {
    store_i32(ast_functions_count_ptr(ast_base), 0);
    store_i32(ast_names_len_ptr(ast_base), 0);
    store_i32(ast_call_data_len_ptr(ast_base), 0);
    ast_expr_reset(ast_base);
}

fn ast_store_name(ast_base: i32, source_base: i32, start: i32, len: i32) -> i32 {
    let name_len_ptr: i32 = ast_names_len_ptr(ast_base);
    let mut used: i32 = load_i32(name_len_ptr);
    if used + len > ast_names_capacity() {
        return -1;
    };
    let name_ptr: i32 = ast_names_base(ast_base) + used;
    let mut idx: i32 = 0;
    loop {
        if idx >= len {
            break;
        };
        let byte: i32 = load_u8(source_base + start + idx);
        store_u8(name_ptr + idx, byte);
        idx = idx + 1;
    };
    used = used + len;
    store_i32(name_len_ptr, used);
    name_ptr
}

fn ast_call_data_alloc(ast_base: i32, word_count: i32) -> i32 {
    if word_count <= 0 {
        return -1;
    };
    let used_ptr: i32 = ast_call_data_len_ptr(ast_base);
    let used: i32 = load_i32(used_ptr);
    if used + word_count > ast_call_data_capacity() {
        return -1;
    };
    let entry_ptr: i32 = ast_call_data_base(ast_base) + used * word_size();
    store_i32(used_ptr, used + word_count);
    entry_ptr
}

fn call_metadata_name_ptr(metadata_ptr: i32) -> i32 {
    load_i32(metadata_ptr)
}

fn call_metadata_name_len(metadata_ptr: i32) -> i32 {
    load_i32(metadata_ptr + 4)
}

fn call_metadata_arg_count(metadata_ptr: i32) -> i32 {
    load_i32(metadata_ptr + 8)
}

fn call_metadata_callee_index_ptr(metadata_ptr: i32) -> i32 {
    metadata_ptr + 12
}

fn call_metadata_args_base(metadata_ptr: i32) -> i32 {
    metadata_ptr + 16
}

fn ast_write_function_entry(
    ast_base: i32,
    index: i32,
    name_ptr: i32,
    name_len: i32,
    param_count: i32,
    body_kind: i32,
    body_data0: i32,
    body_data1: i32,
) {
    let entry_ptr: i32 = ast_function_entry_ptr(ast_base, index);
    store_i32(entry_ptr, name_ptr);
    store_i32(entry_ptr + 4, name_len);
    store_i32(entry_ptr + 8, param_count);
    store_i32(entry_ptr + 12, body_kind);
    store_i32(entry_ptr + 16, body_data0);
    store_i32(entry_ptr + 20, body_data1);
}

fn ast_extra_base(ast_base: i32) -> i32 {
    ast_call_data_base(ast_base) + ast_call_data_capacity() * word_size()
}

fn ast_expr_entry_size() -> i32 {
    16
}

fn ast_expr_capacity() -> i32 {
    256
}

fn ast_expr_count_ptr(ast_base: i32) -> i32 {
    ast_extra_base(ast_base)
}

fn ast_expr_entry_ptr(ast_base: i32, index: i32) -> i32 {
    ast_extra_base(ast_base) + word_size() + index * ast_expr_entry_size()
}

fn ast_temp_base(ast_base: i32) -> i32 {
    ast_extra_base(ast_base) + word_size() + ast_expr_capacity() * ast_expr_entry_size()
}

fn ast_expr_reset(ast_base: i32) {
    store_i32(ast_expr_count_ptr(ast_base), 0);
}

fn ast_expr_count(ast_base: i32) -> i32 {
    load_i32(ast_expr_count_ptr(ast_base))
}

fn ast_expr_alloc(ast_base: i32, kind: i32, data0: i32, data1: i32, data2: i32) -> i32 {
    let count_ptr: i32 = ast_expr_count_ptr(ast_base);
    let count: i32 = load_i32(count_ptr);
    if count >= ast_expr_capacity() {
        return -1;
    };
    let entry_ptr: i32 = ast_expr_entry_ptr(ast_base, count);
    store_i32(entry_ptr, kind);
    store_i32(entry_ptr + 4, data0);
    store_i32(entry_ptr + 8, data1);
    store_i32(entry_ptr + 12, data2);
    store_i32(count_ptr, count + 1);
    count
}

fn ast_expr_alloc_literal(ast_base: i32, value: i32) -> i32 {
    ast_expr_alloc(ast_base, 0, value, 0, 0)
}

fn ast_expr_alloc_call(ast_base: i32, metadata_ptr: i32) -> i32 {
    ast_expr_alloc(ast_base, 1, metadata_ptr, 0, 0)
}

fn ast_expr_alloc_add(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 2, left_index, right_index, 0)
}

fn ast_expr_alloc_sub(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 3, left_index, right_index, 0)
}

fn ast_expr_alloc_mul(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 4, left_index, right_index, 0)
}

fn ast_expr_alloc_div(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 5, left_index, right_index, 0)
}

fn ast_expr_alloc_eq(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 14, left_index, right_index, 0)
}

fn ast_expr_alloc_ne(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 15, left_index, right_index, 0)
}

fn ast_expr_alloc_lt(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 16, left_index, right_index, 0)
}

fn ast_expr_alloc_gt(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 17, left_index, right_index, 0)
}

fn ast_expr_alloc_le(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 18, left_index, right_index, 0)
}

fn ast_expr_alloc_ge(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 19, left_index, right_index, 0)
}

fn ast_expr_alloc_logical_or(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 20, left_index, right_index, 0)
}

fn ast_expr_alloc_logical_and(ast_base: i32, left_index: i32, right_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 21, left_index, right_index, 0)
}

fn ast_expr_alloc_logical_not(ast_base: i32, value_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 22, value_index, 0, 0)
}

fn ast_expr_alloc_param(ast_base: i32, param_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 6, param_index, 0, 0)
}

fn ast_expr_alloc_if(
    ast_base: i32,
    condition_index: i32,
    then_index: i32,
    else_index: i32,
) -> i32 {
    ast_expr_alloc(ast_base, 7, condition_index, then_index, else_index)
}

fn ast_expr_alloc_local(ast_base: i32, local_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 8, local_index, 0, 0)
}

fn ast_expr_alloc_let(
    ast_base: i32,
    local_index: i32,
    init_index: i32,
    body_index: i32,
) -> i32 {
    ast_expr_alloc(ast_base, 9, local_index, init_index, body_index)
}

fn ast_expr_alloc_set_local(ast_base: i32, local_index: i32, value_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 10, local_index, value_index, 0)
}

fn ast_expr_alloc_sequence(ast_base: i32, first_index: i32, then_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 11, first_index, then_index, 0)
}

fn ast_expr_alloc_loop(ast_base: i32, body_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 12, body_index, 0, 0)
}

fn ast_expr_alloc_break(ast_base: i32, value_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 13, -1, value_index, 0)
}

fn ast_expr_alloc_return(ast_base: i32, value_index: i32) -> i32 {
    ast_expr_alloc(ast_base, 23, value_index, 0, 0)
}

fn expression_node_from_parts(ast_base: i32, kind: i32, data0: i32, data1: i32) -> i32 {
    if kind == 0 {
        return ast_expr_alloc_literal(ast_base, data0);
    };
    if kind == 1 {
        return ast_expr_alloc_call(ast_base, data0);
    };
    if kind == 6 {
        return ast_expr_alloc_param(ast_base, data0);
    };
    if kind == 8 {
        return ast_expr_alloc_local(ast_base, data0);
    };
    data0
}

fn parse_basic_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    literal_ptr: i32,
    ident_start_ptr: i32,
    ident_len_ptr: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
    nested_temp_base: i32,
) -> i32 {
    if cursor >= len {
        return -1;
    };
    let first_byte: i32 = load_u8(base + cursor);
    if first_byte == 123 {
        let block_cursor: i32 = parse_block_expression_body(
            base,
            len,
            cursor + 1,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            literal_ptr,
            ident_start_ptr,
            ident_len_ptr,
            nested_temp_base,
            0,
            loop_depth_ptr,
            out_kind_ptr,
            out_data0_ptr,
            out_data1_ptr,
        );
        if block_cursor < 0 {
            return -1;
        };
        return block_cursor;
    };
    if first_byte == 105 {
        let mut if_cursor: i32 = expect_keyword_if(base, len, cursor);
        if if_cursor >= 0 {
            let cond_kind_ptr: i32 = nested_temp_base;
            let cond_data0_ptr: i32 = nested_temp_base + 4;
            let cond_data1_ptr: i32 = nested_temp_base + 8;
            let then_kind_ptr: i32 = nested_temp_base + 12;
            let then_data0_ptr: i32 = nested_temp_base + 16;
            let then_data1_ptr: i32 = nested_temp_base + 20;
            let else_kind_ptr: i32 = nested_temp_base + 24;
            let else_data0_ptr: i32 = nested_temp_base + 28;
            let else_data1_ptr: i32 = nested_temp_base + 32;
            let cond_nested_base: i32 = nested_temp_base + 128;
            let then_nested_base: i32 = nested_temp_base + 256;
            let else_nested_base: i32 = nested_temp_base + 384;
            if_cursor = skip_whitespace(base, len, if_cursor);
            if_cursor = parse_expression(
                base,
                len,
                if_cursor,
                ast_base,
                params_table_ptr,
                params_count,
                locals_table_ptr,
                locals_stack_count_ptr,
                locals_next_index_ptr,
                cond_nested_base,
                loop_depth_ptr,
                cond_kind_ptr,
                cond_data0_ptr,
                cond_data1_ptr,
            );
            if if_cursor < 0 {
                return -1;
            };
            if_cursor = skip_whitespace(base, len, if_cursor);
            if_cursor = expect_char(base, len, if_cursor, 123);
            if if_cursor < 0 {
                return -1;
            };
            if_cursor = parse_block_expression_body(
                base,
                len,
                if_cursor,
                ast_base,
                params_table_ptr,
                params_count,
                locals_table_ptr,
                locals_stack_count_ptr,
                locals_next_index_ptr,
                literal_ptr,
                ident_start_ptr,
                ident_len_ptr,
                then_nested_base,
                0,
                loop_depth_ptr,
                then_kind_ptr,
                then_data0_ptr,
                then_data1_ptr,
            );
            if if_cursor < 0 {
                return -1;
            };
            if_cursor = expect_keyword_else(base, len, if_cursor);
            if if_cursor < 0 {
                return -1;
            };
            if_cursor = skip_whitespace(base, len, if_cursor);
            if_cursor = expect_char(base, len, if_cursor, 123);
            if if_cursor < 0 {
                return -1;
            };
            if_cursor = parse_block_expression_body(
                base,
                len,
                if_cursor,
                ast_base,
                params_table_ptr,
                params_count,
                locals_table_ptr,
                locals_stack_count_ptr,
                locals_next_index_ptr,
                literal_ptr,
                ident_start_ptr,
                ident_len_ptr,
                else_nested_base,
                0,
                loop_depth_ptr,
                else_kind_ptr,
                else_data0_ptr,
                else_data1_ptr,
            );
            if if_cursor < 0 {
                return -1;
            };
            let cond_kind: i32 = load_i32(cond_kind_ptr);
            let cond_data0: i32 = load_i32(cond_data0_ptr);
            let cond_data1: i32 = load_i32(cond_data1_ptr);
            let cond_index: i32 =
                expression_node_from_parts(ast_base, cond_kind, cond_data0, cond_data1);
            if cond_index < 0 {
                return -1;
            };
            let then_kind: i32 = load_i32(then_kind_ptr);
            let then_data0: i32 = load_i32(then_data0_ptr);
            let then_data1: i32 = load_i32(then_data1_ptr);
            let then_index: i32 =
                expression_node_from_parts(ast_base, then_kind, then_data0, then_data1);
            if then_index < 0 {
                return -1;
            };
            let else_kind: i32 = load_i32(else_kind_ptr);
            let else_data0: i32 = load_i32(else_data0_ptr);
            let else_data1: i32 = load_i32(else_data1_ptr);
            let else_index: i32 =
                expression_node_from_parts(ast_base, else_kind, else_data0, else_data1);
            if else_index < 0 {
                return -1;
            };
            let if_index: i32 = ast_expr_alloc_if(ast_base, cond_index, then_index, else_index);
            if if_index < 0 {
                return -1;
            };
            store_i32(out_kind_ptr, 2);
            store_i32(out_data0_ptr, if_index);
            store_i32(out_data1_ptr, 0);
            return skip_whitespace(base, len, if_cursor);
        };
    };
    if first_byte == 40 {
        let mut paren_cursor: i32 = cursor + 1;
        paren_cursor = skip_whitespace(base, len, paren_cursor);
        paren_cursor = parse_expression(
            base,
            len,
            paren_cursor,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            nested_temp_base,
            loop_depth_ptr,
            out_kind_ptr,
            out_data0_ptr,
            out_data1_ptr,
        );
        if paren_cursor < 0 {
            return -1;
        };
        paren_cursor = skip_whitespace(base, len, paren_cursor);
        paren_cursor = expect_char(base, len, paren_cursor, 41);
        if paren_cursor < 0 {
            return -1;
        };
        return skip_whitespace(base, len, paren_cursor);
    };
    if first_byte == 45 || is_digit(first_byte) {
        let next_cursor: i32 = parse_i32_literal(base, len, cursor, literal_ptr);
        if next_cursor < 0 {
            return -1;
        };
        let value: i32 = load_i32(literal_ptr);
        store_i32(out_kind_ptr, 0);
        store_i32(out_data0_ptr, value);
        store_i32(out_data1_ptr, 0);
        return skip_whitespace(base, len, next_cursor);
    };
    if first_byte == 116 {
        let next_cursor: i32 = expect_keyword_true(base, len, cursor);
        if next_cursor >= 0 {
            store_i32(out_kind_ptr, 0);
            store_i32(out_data0_ptr, 1);
            store_i32(out_data1_ptr, 0);
            return skip_whitespace(base, len, next_cursor);
        };
    };
    if first_byte == 102 {
        let next_cursor: i32 = expect_keyword_false(base, len, cursor);
        if next_cursor >= 0 {
            store_i32(out_kind_ptr, 0);
            store_i32(out_data0_ptr, 0);
            store_i32(out_data1_ptr, 0);
            return skip_whitespace(base, len, next_cursor);
        };
    };
    if !is_identifier_start(first_byte) {
        return -1;
    };
    let mut next_cursor: i32 = parse_identifier(base, len, cursor, ident_start_ptr, ident_len_ptr);
    if next_cursor < 0 {
        return -1;
    };
    let ident_start: i32 = load_i32(ident_start_ptr);
    let ident_len: i32 = load_i32(ident_len_ptr);
    next_cursor = skip_whitespace(base, len, next_cursor);
    if next_cursor < len {
        let next_byte: i32 = load_u8(base + next_cursor);
        if next_byte == 40 {
            let mut call_cursor: i32 = next_cursor + 1;
            call_cursor = skip_whitespace(base, len, call_cursor);
            let args_limit: i32 = max_params();
            let arg_kind_ptr: i32 = nested_temp_base;
            let arg_data0_ptr: i32 = nested_temp_base + 4;
            let arg_data1_ptr: i32 = nested_temp_base + 8;
            let args_list_ptr: i32 = nested_temp_base + 16;
            let arg_nested_base: i32 = nested_temp_base + 160;
            let mut arg_count: i32 = 0;
            if call_cursor < len {
                let maybe_close: i32 = load_u8(base + call_cursor);
                if maybe_close == 41 {
                    call_cursor = call_cursor + 1;
                } else {
                    loop {
                        if arg_count >= args_limit {
                            return -1;
                        };
                        call_cursor = parse_expression(
                            base,
                            len,
                            call_cursor,
                            ast_base,
                            params_table_ptr,
                            params_count,
                            locals_table_ptr,
                            locals_stack_count_ptr,
                            locals_next_index_ptr,
                            arg_nested_base,
                            loop_depth_ptr,
                            arg_kind_ptr,
                            arg_data0_ptr,
                            arg_data1_ptr,
                        );
                        if call_cursor < 0 {
                            return -1;
                        };
                        let arg_kind: i32 = load_i32(arg_kind_ptr);
                        let arg_data0: i32 = load_i32(arg_data0_ptr);
                        let arg_data1: i32 = load_i32(arg_data1_ptr);
                        let arg_index: i32 =
                            expression_node_from_parts(ast_base, arg_kind, arg_data0, arg_data1);
                        if arg_index < 0 {
                            return -1;
                        };
                        store_i32(args_list_ptr + arg_count * 4, arg_index);
                        arg_count = arg_count + 1;
                        call_cursor = skip_whitespace(base, len, call_cursor);
                        if call_cursor >= len {
                            return -1;
                        };
                        let delimiter: i32 = load_u8(base + call_cursor);
                        if delimiter == 44 {
                            call_cursor = skip_whitespace(base, len, call_cursor + 1);
                            if call_cursor >= len {
                                return -1;
                            };
                            let after_comma: i32 = load_u8(base + call_cursor);
                            if after_comma == 41 {
                                call_cursor = call_cursor + 1;
                                break;
                            };
                            continue;
                        };
                        if delimiter == 41 {
                            call_cursor = call_cursor + 1;
                            break;
                        };
                        return -1;
                    };
                };
            } else {
                return -1;
            };
            let name_ptr: i32 = ast_store_name(ast_base, base, ident_start, ident_len);
            if name_ptr < 0 {
                return -1;
            };
            let metadata_words: i32 = 4 + arg_count;
            let metadata_ptr: i32 = ast_call_data_alloc(ast_base, metadata_words);
            if metadata_ptr < 0 {
                return -1;
            };
            store_i32(metadata_ptr, name_ptr);
            store_i32(metadata_ptr + 4, ident_len);
            store_i32(metadata_ptr + 8, arg_count);
            store_i32(metadata_ptr + 12, -1);
            let mut arg_idx: i32 = 0;
            loop {
                if arg_idx >= arg_count {
                    break;
                };
                let arg_value: i32 = load_i32(args_list_ptr + arg_idx * 4);
                store_i32(metadata_ptr + 16 + arg_idx * 4, arg_value);
                arg_idx = arg_idx + 1;
            };
            store_i32(out_kind_ptr, 1);
            store_i32(out_data0_ptr, metadata_ptr);
            store_i32(out_data1_ptr, 0);
            return skip_whitespace(base, len, call_cursor);
        };
    };
    let param_index: i32 =
        find_parameter_index(base, params_table_ptr, params_count, ident_start, ident_len);
    if param_index >= 0 {
        store_i32(out_kind_ptr, 6);
        store_i32(out_data0_ptr, param_index);
        store_i32(out_data1_ptr, 0);
        return skip_whitespace(base, len, next_cursor);
    };
    let locals_stack: i32 = load_i32(locals_stack_count_ptr);
    let local_entry_index: i32 = find_local_entry_index(
        base,
        locals_table_ptr,
        locals_stack,
        ident_start,
        ident_len,
    );
    if local_entry_index < 0 {
        return -1;
    };
    let entry_ptr: i32 = locals_entry_ptr(locals_table_ptr, local_entry_index);
    let local_index: i32 = locals_entry_local_index(entry_ptr);
    store_i32(out_kind_ptr, 8);
    store_i32(out_data0_ptr, local_index);
    store_i32(out_data1_ptr, 0);
    skip_whitespace(base, len, next_cursor)
}

fn parse_unary_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    literal_ptr: i32,
    ident_start_ptr: i32,
    ident_len_ptr: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
    nested_temp_base: i32,
) -> i32 {
    let mut current_cursor: i32 = cursor;
    let mut not_count: i32 = 0;
    loop {
        if current_cursor >= len {
            break;
        };
        let next_byte: i32 = load_u8(base + current_cursor);
        if next_byte != 33 {
            break;
        };
        not_count = not_count + 1;
        current_cursor = skip_whitespace(base, len, current_cursor + 1);
    };

    let resolved_cursor: i32 = parse_basic_expression(
        base,
        len,
        current_cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        literal_ptr,
        ident_start_ptr,
        ident_len_ptr,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
        nested_temp_base,
    );
    if resolved_cursor < 0 {
        return -1;
    };

    if (not_count & 1) != 0 {
        let value_kind: i32 = load_i32(out_kind_ptr);
        let value_data0: i32 = load_i32(out_data0_ptr);
        let value_data1: i32 = load_i32(out_data1_ptr);
        let value_index: i32 =
            expression_node_from_parts(ast_base, value_kind, value_data0, value_data1);
        if value_index < 0 {
            return -1;
        };
        let not_index: i32 = ast_expr_alloc_logical_not(ast_base, value_index);
        if not_index < 0 {
            return -1;
        };
        store_i32(out_kind_ptr, 2);
        store_i32(out_data0_ptr, not_index);
        store_i32(out_data1_ptr, 0);
    };

    resolved_cursor
}

fn parse_multiplicative_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    temp_base: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    let literal_ptr: i32 = temp_base;
    let ident_start_ptr: i32 = temp_base + 4;
    let ident_len_ptr: i32 = temp_base + 8;
    let next_kind_ptr: i32 = temp_base + 12;
    let next_data0_ptr: i32 = temp_base + 16;
    let next_data1_ptr: i32 = temp_base + 20;
    let nested_temp_base: i32 = temp_base + 32;

    let mut current_cursor: i32 = parse_unary_expression(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        literal_ptr,
        ident_start_ptr,
        ident_len_ptr,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
        nested_temp_base,
    );
    if current_cursor < 0 {
        return -1;
    };

    loop {
        if current_cursor >= len {
            break;
        };
        let next_byte: i32 = load_u8(base + current_cursor);
        if next_byte != 42 && next_byte != 47 {
            break;
        };
        let operator: i32 = next_byte;
        current_cursor = current_cursor + 1;
        current_cursor = skip_whitespace(base, len, current_cursor);
        current_cursor = parse_unary_expression(
            base,
            len,
            current_cursor,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            literal_ptr,
            ident_start_ptr,
            ident_len_ptr,
            loop_depth_ptr,
            next_kind_ptr,
            next_data0_ptr,
            next_data1_ptr,
            nested_temp_base,
        );
        if current_cursor < 0 {
            return -1;
        };

        let current_kind: i32 = load_i32(out_kind_ptr);
        let current_data0: i32 = load_i32(out_data0_ptr);
        let current_data1: i32 = load_i32(out_data1_ptr);
        let left_index: i32 = expression_node_from_parts(ast_base, current_kind, current_data0, current_data1);
        if left_index < 0 {
            return -1;
        };

        let right_kind: i32 = load_i32(next_kind_ptr);
        let right_data0: i32 = load_i32(next_data0_ptr);
        let right_data1: i32 = load_i32(next_data1_ptr);
        let right_index: i32 = expression_node_from_parts(ast_base, right_kind, right_data0, right_data1);
        if right_index < 0 {
            return -1;
        };

        let new_index: i32 = if operator == 42 {
            ast_expr_alloc_mul(ast_base, left_index, right_index)
        } else {
            ast_expr_alloc_div(ast_base, left_index, right_index)
        };
        if new_index < 0 {
            return -1;
        };

        store_i32(out_kind_ptr, 2);
        store_i32(out_data0_ptr, new_index);
        store_i32(out_data1_ptr, 0);
    };

    current_cursor
}

fn parse_additive_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    temp_base: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    let mut current_cursor: i32 = parse_multiplicative_expression(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        temp_base,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
    );
    if current_cursor < 0 {
        return -1;
    };

    let next_kind_ptr: i32 = temp_base;
    let next_data0_ptr: i32 = temp_base + 4;
    let next_data1_ptr: i32 = temp_base + 8;
    let nested_temp_base: i32 = temp_base + 32;

    loop {
        if current_cursor >= len {
            break;
        };
        let next_byte: i32 = load_u8(base + current_cursor);
        if next_byte != 43 && next_byte != 45 {
            break;
        };
        let operator: i32 = next_byte;
        current_cursor = current_cursor + 1;
        current_cursor = skip_whitespace(base, len, current_cursor);
        current_cursor = parse_multiplicative_expression(
            base,
            len,
            current_cursor,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            nested_temp_base,
            loop_depth_ptr,
            next_kind_ptr,
            next_data0_ptr,
            next_data1_ptr,
        );
        if current_cursor < 0 {
            return -1;
        };

        let current_kind: i32 = load_i32(out_kind_ptr);
        let current_data0: i32 = load_i32(out_data0_ptr);
        let current_data1: i32 = load_i32(out_data1_ptr);
        let left_index: i32 = expression_node_from_parts(ast_base, current_kind, current_data0, current_data1);
        if left_index < 0 {
            return -1;
        };

        let right_kind: i32 = load_i32(next_kind_ptr);
        let right_data0: i32 = load_i32(next_data0_ptr);
        let right_data1: i32 = load_i32(next_data1_ptr);
        let right_index: i32 = expression_node_from_parts(ast_base, right_kind, right_data0, right_data1);
        if right_index < 0 {
            return -1;
        };

        let new_index: i32 = if operator == 43 {
            ast_expr_alloc_add(ast_base, left_index, right_index)
        } else {
            ast_expr_alloc_sub(ast_base, left_index, right_index)
        };
        if new_index < 0 {
            return -1;
        };

        store_i32(out_kind_ptr, 2);
        store_i32(out_data0_ptr, new_index);
        store_i32(out_data1_ptr, 0);
    };

    current_cursor
}

fn parse_relational_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    temp_base: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    let nested_temp_base: i32 = temp_base + 32;
    let mut current_cursor: i32 = parse_additive_expression(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        nested_temp_base,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
    );
    if current_cursor < 0 {
        return -1;
    };

    let next_kind_ptr: i32 = temp_base;
    let next_data0_ptr: i32 = temp_base + 4;
    let next_data1_ptr: i32 = temp_base + 8;

    loop {
        if current_cursor >= len {
            break;
        };
        let operator_byte: i32 = load_u8(base + current_cursor);
        let mut relation_op: i32 = -1;
        let mut consume: i32 = 1;
        if operator_byte == 60 {
            if current_cursor + 1 < len {
                let next: i32 = load_u8(base + current_cursor + 1);
                if next == 61 {
                    relation_op = 2;
                    consume = 2;
                } else {
                    if next == 60 {
                        return -1;
                    };
                    relation_op = 0;
                };
            } else {
                relation_op = 0;
            };
        } else {
            if operator_byte == 62 {
                if current_cursor + 1 < len {
                    let next: i32 = load_u8(base + current_cursor + 1);
                    if next == 61 {
                        relation_op = 3;
                        consume = 2;
                    } else {
                        if next == 62 {
                            return -1;
                        };
                        relation_op = 1;
                    };
                } else {
                    relation_op = 1;
                };
            };
        };

        if relation_op < 0 {
            break;
        };

        current_cursor = current_cursor + consume;
        current_cursor = skip_whitespace(base, len, current_cursor);
        current_cursor = parse_additive_expression(
            base,
            len,
            current_cursor,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            nested_temp_base,
            loop_depth_ptr,
            next_kind_ptr,
            next_data0_ptr,
            next_data1_ptr,
        );
        if current_cursor < 0 {
            return -1;
        };

        let current_kind: i32 = load_i32(out_kind_ptr);
        let current_data0: i32 = load_i32(out_data0_ptr);
        let current_data1: i32 = load_i32(out_data1_ptr);
        let left_index: i32 = expression_node_from_parts(ast_base, current_kind, current_data0, current_data1);
        if left_index < 0 {
            return -1;
        };

        let right_kind: i32 = load_i32(next_kind_ptr);
        let right_data0: i32 = load_i32(next_data0_ptr);
        let right_data1: i32 = load_i32(next_data1_ptr);
        let right_index: i32 = expression_node_from_parts(ast_base, right_kind, right_data0, right_data1);
        if right_index < 0 {
            return -1;
        };

        let new_index: i32 = if relation_op == 0 {
            ast_expr_alloc_lt(ast_base, left_index, right_index)
        } else {
            if relation_op == 1 {
                ast_expr_alloc_gt(ast_base, left_index, right_index)
            } else {
                if relation_op == 2 {
                    ast_expr_alloc_le(ast_base, left_index, right_index)
                } else {
                    ast_expr_alloc_ge(ast_base, left_index, right_index)
                }
            }
        };
        if new_index < 0 {
            return -1;
        };

        store_i32(out_kind_ptr, 2);
        store_i32(out_data0_ptr, new_index);
        store_i32(out_data1_ptr, 0);
    };

    current_cursor
}

fn parse_equality_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    temp_base: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    let nested_temp_base: i32 = temp_base + 32;
    let mut current_cursor: i32 = parse_relational_expression(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        nested_temp_base,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
    );
    if current_cursor < 0 {
        return -1;
    };

    let next_kind_ptr: i32 = temp_base;
    let next_data0_ptr: i32 = temp_base + 4;
    let next_data1_ptr: i32 = temp_base + 8;

    loop {
        if current_cursor + 1 >= len {
            break;
        };
        let operator_byte: i32 = load_u8(base + current_cursor);
        let next_byte: i32 = load_u8(base + current_cursor + 1);
        let mut equality_op: i32 = -1;
        if operator_byte == 61 {
            if next_byte != 61 {
                break;
            };
            equality_op = 0;
        } else {
            if operator_byte == 33 {
                if next_byte != 61 {
                    break;
                };
                equality_op = 1;
            } else {
                break;
            };
        };

        current_cursor = current_cursor + 2;
        current_cursor = skip_whitespace(base, len, current_cursor);
        current_cursor = parse_relational_expression(
            base,
            len,
            current_cursor,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            nested_temp_base,
            loop_depth_ptr,
            next_kind_ptr,
            next_data0_ptr,
            next_data1_ptr,
        );
        if current_cursor < 0 {
            return -1;
        };

        let current_kind: i32 = load_i32(out_kind_ptr);
        let current_data0: i32 = load_i32(out_data0_ptr);
        let current_data1: i32 = load_i32(out_data1_ptr);
        let left_index: i32 = expression_node_from_parts(ast_base, current_kind, current_data0, current_data1);
        if left_index < 0 {
            return -1;
        };

        let right_kind: i32 = load_i32(next_kind_ptr);
        let right_data0: i32 = load_i32(next_data0_ptr);
        let right_data1: i32 = load_i32(next_data1_ptr);
        let right_index: i32 = expression_node_from_parts(ast_base, right_kind, right_data0, right_data1);
        if right_index < 0 {
            return -1;
        };

        let new_index: i32 = if equality_op == 0 {
            ast_expr_alloc_eq(ast_base, left_index, right_index)
        } else {
            ast_expr_alloc_ne(ast_base, left_index, right_index)
        };
        if new_index < 0 {
            return -1;
        };

        store_i32(out_kind_ptr, 2);
        store_i32(out_data0_ptr, new_index);
        store_i32(out_data1_ptr, 0);
    };

    current_cursor
}

fn parse_logical_and_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    temp_base: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    let nested_temp_base: i32 = temp_base + 32;
    let mut current_cursor: i32 = parse_equality_expression(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        nested_temp_base,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
    );
    if current_cursor < 0 {
        return -1;
    };

    let next_kind_ptr: i32 = temp_base;
    let next_data0_ptr: i32 = temp_base + 4;
    let next_data1_ptr: i32 = temp_base + 8;

    loop {
        if current_cursor + 1 >= len {
            break;
        };
        let first: i32 = load_u8(base + current_cursor);
        if first != 38 {
            break;
        };
        let second: i32 = load_u8(base + current_cursor + 1);
        if second != 38 {
            return -1;
        };
        current_cursor = skip_whitespace(base, len, current_cursor + 2);
        current_cursor = parse_equality_expression(
            base,
            len,
            current_cursor,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            nested_temp_base,
            loop_depth_ptr,
            next_kind_ptr,
            next_data0_ptr,
            next_data1_ptr,
        );
        if current_cursor < 0 {
            return -1;
        };

        let current_kind: i32 = load_i32(out_kind_ptr);
        let current_data0: i32 = load_i32(out_data0_ptr);
        let current_data1: i32 = load_i32(out_data1_ptr);
        let left_index: i32 =
            expression_node_from_parts(ast_base, current_kind, current_data0, current_data1);
        if left_index < 0 {
            return -1;
        };

        let right_kind: i32 = load_i32(next_kind_ptr);
        let right_data0: i32 = load_i32(next_data0_ptr);
        let right_data1: i32 = load_i32(next_data1_ptr);
        let right_index: i32 =
            expression_node_from_parts(ast_base, right_kind, right_data0, right_data1);
        if right_index < 0 {
            return -1;
        };

        let new_index: i32 = ast_expr_alloc_logical_and(ast_base, left_index, right_index);
        if new_index < 0 {
            return -1;
        };

        store_i32(out_kind_ptr, 2);
        store_i32(out_data0_ptr, new_index);
        store_i32(out_data1_ptr, 0);
    };

    current_cursor
}

fn parse_logical_or_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    temp_base: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    let nested_temp_base: i32 = temp_base + 32;
    let mut current_cursor: i32 = parse_logical_and_expression(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        nested_temp_base,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
    );
    if current_cursor < 0 {
        return -1;
    };

    let next_kind_ptr: i32 = temp_base;
    let next_data0_ptr: i32 = temp_base + 4;
    let next_data1_ptr: i32 = temp_base + 8;

    loop {
        if current_cursor + 1 >= len {
            break;
        };
        let first: i32 = load_u8(base + current_cursor);
        if first != 124 {
            break;
        };
        let second: i32 = load_u8(base + current_cursor + 1);
        if second != 124 {
            return -1;
        };
        current_cursor = skip_whitespace(base, len, current_cursor + 2);
        current_cursor = parse_logical_and_expression(
            base,
            len,
            current_cursor,
            ast_base,
            params_table_ptr,
            params_count,
            locals_table_ptr,
            locals_stack_count_ptr,
            locals_next_index_ptr,
            nested_temp_base,
            loop_depth_ptr,
            next_kind_ptr,
            next_data0_ptr,
            next_data1_ptr,
        );
        if current_cursor < 0 {
            return -1;
        };

        let current_kind: i32 = load_i32(out_kind_ptr);
        let current_data0: i32 = load_i32(out_data0_ptr);
        let current_data1: i32 = load_i32(out_data1_ptr);
        let left_index: i32 =
            expression_node_from_parts(ast_base, current_kind, current_data0, current_data1);
        if left_index < 0 {
            return -1;
        };

        let right_kind: i32 = load_i32(next_kind_ptr);
        let right_data0: i32 = load_i32(next_data0_ptr);
        let right_data1: i32 = load_i32(next_data1_ptr);
        let right_index: i32 =
            expression_node_from_parts(ast_base, right_kind, right_data0, right_data1);
        if right_index < 0 {
            return -1;
        };

        let new_index: i32 = ast_expr_alloc_logical_or(ast_base, left_index, right_index);
        if new_index < 0 {
            return -1;
        };

        store_i32(out_kind_ptr, 2);
        store_i32(out_data0_ptr, new_index);
        store_i32(out_data1_ptr, 0);
    };

    current_cursor
}

fn parse_expression(
    base: i32,
    len: i32,
    cursor: i32,
    ast_base: i32,
    params_table_ptr: i32,
    params_count: i32,
    locals_table_ptr: i32,
    locals_stack_count_ptr: i32,
    locals_next_index_ptr: i32,
    temp_base: i32,
    loop_depth_ptr: i32,
    out_kind_ptr: i32,
    out_data0_ptr: i32,
    out_data1_ptr: i32,
) -> i32 {
    parse_logical_or_expression(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        params_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        temp_base,
        loop_depth_ptr,
        out_kind_ptr,
        out_data0_ptr,
        out_data1_ptr,
    )
}

fn parse_function(base: i32, len: i32, offset: i32, ast_base: i32, func_index: i32) -> i32 {
    let mut cursor: i32 = skip_whitespace(base, len, offset);
    cursor = expect_keyword_fn(base, len, cursor);
    if cursor < 0 {
        return -1;
    };
    cursor = skip_whitespace(base, len, cursor);

    let temp_base: i32 = ast_temp_base(ast_base);
    let name_start_ptr: i32 = temp_base;
    let name_len_ptr: i32 = temp_base + 4;
    let params_count_ptr: i32 = temp_base + 8;
    let params_table_ptr: i32 = temp_base + 12;
    let params_table_end: i32 = params_table_ptr + max_params() * 8;
    let param_name_start_ptr: i32 = params_table_end;
    let param_name_len_ptr: i32 = param_name_start_ptr + 4;
    let expr_kind_ptr: i32 = param_name_len_ptr + 4;
    let expr_data0_ptr: i32 = expr_kind_ptr + 4;
    let expr_data1_ptr: i32 = expr_kind_ptr + 8;
    let locals_stack_count_ptr: i32 = expr_kind_ptr + 12;
    let locals_table_ptr: i32 = locals_stack_count_ptr + 4;
    let locals_next_index_ptr: i32 = locals_table_ptr + max_locals() * locals_entry_size();
    let expr_temp_base: i32 = locals_next_index_ptr + 4;
    cursor = parse_identifier(base, len, cursor, name_start_ptr, name_len_ptr);
    if cursor < 0 {
        return -1;
    };
    let name_start: i32 = load_i32(name_start_ptr);
    let name_len: i32 = load_i32(name_len_ptr);

    cursor = skip_whitespace(base, len, cursor);
    cursor = expect_char(base, len, cursor, 40);
    if cursor < 0 {
        return -1;
    };
    cursor = skip_whitespace(base, len, cursor);
    store_i32(params_count_ptr, 0);
    let mut param_count: i32 = 0;
    loop {
        if cursor >= len {
            return -1;
        };
        let next_byte: i32 = load_u8(base + cursor);
        if next_byte == 41 {
            cursor = cursor + 1;
            break;
        };
        if param_count >= max_params() {
            return -1;
        };
        cursor = parse_identifier(base, len, cursor, param_name_start_ptr, param_name_len_ptr);
        if cursor < 0 {
            return -1;
        };
        let param_start: i32 = load_i32(param_name_start_ptr);
        let param_len: i32 = load_i32(param_name_len_ptr);
        let mut existing_idx: i32 = 0;
        loop {
            if existing_idx >= param_count {
                break;
            };
            let existing_ptr: i32 = params_table_ptr + existing_idx * 8;
            let existing_start: i32 = load_i32(existing_ptr);
            let existing_len: i32 = load_i32(existing_ptr + 4);
            if identifiers_match_source(base, existing_start, existing_len, param_start, param_len) {
                return -1;
            };
            existing_idx = existing_idx + 1;
        };
        cursor = skip_whitespace(base, len, cursor);
        cursor = expect_char(base, len, cursor, 58);
        if cursor < 0 {
            return -1;
        };
        cursor = skip_whitespace(base, len, cursor);
        cursor = parse_type(base, len, cursor, -1);
        if cursor < 0 {
            return -1;
        };
        store_i32(params_table_ptr + param_count * 8, param_start);
        store_i32(params_table_ptr + param_count * 8 + 4, param_len);
        param_count = param_count + 1;
        cursor = skip_whitespace(base, len, cursor);
        if cursor >= len {
            return -1;
        };
        let delimiter: i32 = load_u8(base + cursor);
        if delimiter == 44 {
            cursor = skip_whitespace(base, len, cursor + 1);
            if cursor >= len {
                return -1;
            };
            let maybe_close: i32 = load_u8(base + cursor);
            if maybe_close == 41 {
                cursor = cursor + 1;
                break;
            };
            continue;
        };
        if delimiter == 41 {
            cursor = cursor + 1;
            break;
        };
        return -1;
    };
    store_i32(params_count_ptr, param_count);
    store_i32(locals_stack_count_ptr, 0);
    store_i32(locals_next_index_ptr, 0);
    cursor = skip_whitespace(base, len, cursor);

    cursor = expect_char(base, len, cursor, 45);
    if cursor < 0 {
        return -1;
    };
    cursor = expect_char(base, len, cursor, 62);
    if cursor < 0 {
        return -1;
    };
    cursor = skip_whitespace(base, len, cursor);
    cursor = parse_type(base, len, cursor, -1);
    if cursor < 0 {
        return -1;
    };

    cursor = skip_whitespace(base, len, cursor);
    cursor = expect_char(base, len, cursor, 123);
    if cursor < 0 {
        return -1;
    };

    let block_literal_ptr: i32 = expr_temp_base;
    let block_ident_start_ptr: i32 = expr_temp_base + 4;
    let block_ident_len_ptr: i32 = expr_temp_base + 8;
    let loop_depth_ptr: i32 = expr_temp_base + 12;
    let block_temp_base: i32 = expr_temp_base + 32;

    store_i32(loop_depth_ptr, 0);
    cursor = parse_block_expression_body(
        base,
        len,
        cursor,
        ast_base,
        params_table_ptr,
        param_count,
        locals_table_ptr,
        locals_stack_count_ptr,
        locals_next_index_ptr,
        block_literal_ptr,
        block_ident_start_ptr,
        block_ident_len_ptr,
        block_temp_base,
        0,
        loop_depth_ptr,
        expr_kind_ptr,
        expr_data0_ptr,
        expr_data1_ptr,
    );
    if cursor < 0 {
        return -1;
    };

    let name_ptr: i32 = ast_store_name(ast_base, base, name_start, name_len);
    if name_ptr < 0 {
        return -1;
    };
    let body_kind: i32 = load_i32(expr_kind_ptr);
    let body_data0: i32 = load_i32(expr_data0_ptr);
    let body_data1: i32 = load_i32(expr_data1_ptr);
    if body_kind < 0 {
        return -1;
    };
    let locals_total: i32 = load_i32(locals_next_index_ptr);
    ast_write_function_entry(
        ast_base,
        func_index,
        name_ptr,
        name_len,
        param_count,
        body_kind,
        body_data0,
        locals_total,
    );
    cursor
}

fn parse_program(base: i32, len: i32, ast_base: i32) -> i32 {
    let mut cursor: i32 = skip_whitespace(base, len, 0);
    let mut count: i32 = 0;
    loop {
        if cursor >= len {
            break;
        };
        if count >= ast_max_functions() {
            return -1;
        };
        cursor = parse_function(base, len, cursor, ast_base, count);
        if cursor < 0 {
            return -1;
        };
        count = count + 1;
        cursor = skip_whitespace(base, len, cursor);
    };
    store_i32(ast_functions_count_ptr(ast_base), count);
    count
}

fn identifiers_match(ptr_a: i32, len_a: i32, ptr_b: i32, len_b: i32) -> bool {
    if len_a != len_b {
        return false;
    };
    let mut idx: i32 = 0;
    loop {
        if idx >= len_a {
            break;
        };
        let a_byte: i32 = load_u8(ptr_a + idx);
        let b_byte: i32 = load_u8(ptr_b + idx);
        if a_byte != b_byte {
            return false;
        };
        idx = idx + 1;
    };
    true
}

fn resolve_call_metadata(ast_base: i32, metadata_ptr: i32, func_count: i32) -> i32 {
    if metadata_ptr < 0 {
        return -1;
    };
    let arg_count: i32 = call_metadata_arg_count(metadata_ptr);
    let args_base: i32 = call_metadata_args_base(metadata_ptr);
    let mut arg_idx: i32 = 0;
    loop {
        if arg_idx >= arg_count {
            break;
        };
        let arg_expr_index: i32 = load_i32(args_base + arg_idx * 4);
        if resolve_expression(ast_base, arg_expr_index, func_count) < 0 {
            return -1;
        };
        arg_idx = arg_idx + 1;
    };

    let call_name_ptr: i32 = call_metadata_name_ptr(metadata_ptr);
    let call_name_len: i32 = call_metadata_name_len(metadata_ptr);
    let mut target_idx: i32 = 0;
    let mut found_idx: i32 = -1;
    loop {
        if target_idx >= func_count {
            break;
        };
        let target_entry_ptr: i32 = ast_function_entry_ptr(ast_base, target_idx);
        let target_name_ptr: i32 = load_i32(target_entry_ptr);
        let target_name_len: i32 = load_i32(target_entry_ptr + 4);
        if call_name_len == target_name_len {
            if identifiers_match(call_name_ptr, call_name_len, target_name_ptr, target_name_len) {
                let expected_params: i32 = load_i32(target_entry_ptr + 8);
                if expected_params != arg_count {
                    return -1;
                };
                found_idx = target_idx;
                break;
            };
        };
        target_idx = target_idx + 1;
    };
    if found_idx < 0 {
        return -1;
    };
    store_i32(call_metadata_callee_index_ptr(metadata_ptr), found_idx);
    0
}

fn validate_program(ast_base: i32, func_count: i32) -> i32 {
    if func_count <= 0 {
        return -1;
    };
    let mut main_count: i32 = 0;
    let main_name_ptr: i32 = ast_temp_base(ast_base);
    store_u8(main_name_ptr + 0, 109);
    store_u8(main_name_ptr + 1, 97);
    store_u8(main_name_ptr + 2, 105);
    store_u8(main_name_ptr + 3, 110);
    let mut idx: i32 = 0;
    loop {
        if idx >= func_count {
            break;
        };
        let entry_ptr: i32 = ast_function_entry_ptr(ast_base, idx);
        let name_ptr: i32 = load_i32(entry_ptr);
        let name_len: i32 = load_i32(entry_ptr + 4);
        let param_count: i32 = load_i32(entry_ptr + 8);
        let body_kind: i32 = load_i32(entry_ptr + 12);
        store_u8(main_name_ptr + 0, 109);
        store_u8(main_name_ptr + 1, 97);
        store_u8(main_name_ptr + 2, 105);
        store_u8(main_name_ptr + 3, 110);
        if name_len == 4 {
            if identifiers_match(name_ptr, name_len, main_name_ptr, 4) {
                main_count = main_count + 1;
                if param_count != 0 {
                    return -1;
                };
            };
        };
        let mut other_idx: i32 = idx + 1;
        loop {
            if other_idx >= func_count {
                break;
            };
            let other_entry_ptr: i32 = ast_function_entry_ptr(ast_base, other_idx);
            let other_name_ptr: i32 = load_i32(other_entry_ptr);
            let other_name_len: i32 = load_i32(other_entry_ptr + 4);
            if name_len == other_name_len {
                if identifiers_match(name_ptr, name_len, other_name_ptr, other_name_len) {
                    return -1;
                };
            };
            other_idx = other_idx + 1;
        };

        if body_kind == 1 {
            let metadata_ptr: i32 = load_i32(entry_ptr + 16);
            if resolve_call_metadata(ast_base, metadata_ptr, func_count) < 0 {
                return -1;
            };
        } else {
            if body_kind == 2 {
                let expr_index: i32 = load_i32(entry_ptr + 16);
                if resolve_expression(ast_base, expr_index, func_count) < 0 {
                    return -1;
                };
                };
        };
        idx = idx + 1;
    };
    if main_count != 1 {
        return -1;
    };
    0
}

fn resolve_control_stack_capacity() -> i32 {
    128
}

fn resolve_loop_stack_capacity() -> i32 {
    64
}

fn resolve_expression_internal(
    ast_base: i32,
    expr_index: i32,
    func_count: i32,
    control_stack_base: i32,
    control_stack_count_ptr: i32,
    loop_stack_base: i32,
    loop_stack_count_ptr: i32,
) -> i32 {
    if expr_index < 0 {
        return -1;
    };
    if expr_index >= ast_expr_count(ast_base) {
        return -1;
    };
    let entry_ptr: i32 = ast_expr_entry_ptr(ast_base, expr_index);
    let kind: i32 = load_i32(entry_ptr);
    if kind == 0 {
        return 0;
    };
    if kind == 1 {
        let metadata_ptr: i32 = load_i32(entry_ptr + 4);
        if metadata_ptr < 0 {
            return -1;
        };
        if resolve_call_metadata(ast_base, metadata_ptr, func_count) < 0 {
            return -1;
        };
        return 0;
    };
    if kind == 6 {
        return 0;
    };
    if kind == 8 {
        return 0;
    };
    if kind == 2
        || kind == 3
        || kind == 4
        || kind == 5
        || kind == 14
        || kind == 15
        || kind == 16
        || kind == 17
        || kind == 18
        || kind == 19
        || kind == 20
        || kind == 21
    {
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        if resolve_expression_internal(
            ast_base,
            left_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            return -1;
        };
        if resolve_expression_internal(
            ast_base,
            right_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            return -1;
        };
        return 0;
    };
    if kind == 22 {
        let value_index: i32 = load_i32(entry_ptr + 4);
        return resolve_expression_internal(
            ast_base,
            value_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        );
    };
    if kind == 23 {
        let value_index: i32 = load_i32(entry_ptr + 4);
        return resolve_expression_internal(
            ast_base,
            value_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        );
    };
    if kind == 7 {
        let condition_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        let else_index: i32 = load_i32(entry_ptr + 12);
        if resolve_expression_internal(
            ast_base,
            condition_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            return -1;
        };
        let control_count: i32 = load_i32(control_stack_count_ptr);
        if control_count >= resolve_control_stack_capacity() {
            return -1;
        };
        store_i32(control_stack_base + control_count * 4, 0);
        store_i32(control_stack_count_ptr, control_count + 1);
        if resolve_expression_internal(
            ast_base,
            then_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            store_i32(control_stack_count_ptr, control_count);
            return -1;
        };
        if resolve_expression_internal(
            ast_base,
            else_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            store_i32(control_stack_count_ptr, control_count);
            return -1;
        };
        store_i32(control_stack_count_ptr, control_count);
        return 0;
    };
    if kind == 9 {
        let init_index: i32 = load_i32(entry_ptr + 8);
        let body_index: i32 = load_i32(entry_ptr + 12);
        if resolve_expression_internal(
            ast_base,
            init_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            return -1;
        };
        if resolve_expression_internal(
            ast_base,
            body_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            return -1;
        };
        return 0;
    };
    if kind == 10 {
        let value_index: i32 = load_i32(entry_ptr + 8);
        return resolve_expression_internal(
            ast_base,
            value_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        );
    };
    if kind == 11 {
        let first_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        if resolve_expression_internal(
            ast_base,
            first_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            return -1;
        };
        if resolve_expression_internal(
            ast_base,
            then_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        ) < 0 {
            return -1;
        };
        return 0;
    };
    if kind == 12 {
        let body_index: i32 = load_i32(entry_ptr + 4);
        let control_count: i32 = load_i32(control_stack_count_ptr);
        let control_capacity: i32 = resolve_control_stack_capacity();
        if control_count + 2 > control_capacity {
            return -1;
        };
        let loop_count: i32 = load_i32(loop_stack_count_ptr);
        let loop_capacity: i32 = resolve_loop_stack_capacity();
        if loop_count >= loop_capacity {
            return -1;
        };
        store_i32(control_stack_base + control_count * 4, 0);
        store_i32(control_stack_count_ptr, control_count + 1);
        store_i32(control_stack_base + (control_count + 1) * 4, 1);
        store_i32(control_stack_count_ptr, control_count + 2);
        store_i32(loop_stack_base + loop_count * 4, control_count);
        store_i32(loop_stack_count_ptr, loop_count + 1);
        let body_result: i32 = resolve_expression_internal(
            ast_base,
            body_index,
            func_count,
            control_stack_base,
            control_stack_count_ptr,
            loop_stack_base,
            loop_stack_count_ptr,
        );
        store_i32(loop_stack_count_ptr, loop_count);
        store_i32(control_stack_count_ptr, control_count);
        if body_result < 0 {
            return -1;
        };
        return 0;
    };
    if kind == 13 {
        let loop_count: i32 = load_i32(loop_stack_count_ptr);
        if loop_count <= 0 {
            return -1;
        };
        let target_index: i32 = load_i32(loop_stack_base + (loop_count - 1) * 4);
        let control_count: i32 = load_i32(control_stack_count_ptr);
        let branch_depth: i32 = control_count - 1 - target_index;
        if branch_depth < 0 {
            return -1;
        };
        store_i32(entry_ptr + 4, branch_depth);
        let value_index: i32 = load_i32(entry_ptr + 8);
        if value_index >= 0 {
            return resolve_expression_internal(
                ast_base,
                value_index,
                func_count,
                control_stack_base,
                control_stack_count_ptr,
                loop_stack_base,
                loop_stack_count_ptr,
            );
        };
        return 0;
    };
    -1
}

fn resolve_expression(ast_base: i32, expr_index: i32, func_count: i32) -> i32 {
    let temp_base: i32 = ast_temp_base(ast_base);
    let control_count_ptr: i32 = temp_base;
    let loop_count_ptr: i32 = temp_base + 4;
    let control_stack_base: i32 = temp_base + 8;
    let control_capacity: i32 = resolve_control_stack_capacity();
    let loop_stack_base: i32 = control_stack_base + control_capacity * 4;
    store_i32(control_count_ptr, 0);
    store_i32(loop_count_ptr, 0);
    resolve_expression_internal(
        ast_base,
        expr_index,
        func_count,
        control_stack_base,
        control_count_ptr,
        loop_stack_base,
        loop_count_ptr,
    )
}

fn expression_code_size(ast_base: i32, expr_index: i32) -> i32 {
    if expr_index < 0 {
        return -1;
    };
    if expr_index >= ast_expr_count(ast_base) {
        return -1;
    };
    let entry_ptr: i32 = ast_expr_entry_ptr(ast_base, expr_index);
    let kind: i32 = load_i32(entry_ptr);
    if kind == 0 {
        let value: i32 = load_i32(entry_ptr + 4);
        return 1 + leb_i32_len(value);
    };
    if kind == 1 {
        let metadata_ptr: i32 = load_i32(entry_ptr + 4);
        if metadata_ptr < 0 {
            return -1;
        };
        let callee_index: i32 = load_i32(call_metadata_callee_index_ptr(metadata_ptr));
        if callee_index < 0 {
            return -1;
        };
        let arg_count: i32 = call_metadata_arg_count(metadata_ptr);
        let args_base: i32 = call_metadata_args_base(metadata_ptr);
        let mut total: i32 = 0;
        let mut arg_idx: i32 = 0;
        loop {
            if arg_idx >= arg_count {
                break;
            };
            let arg_expr_index: i32 = load_i32(args_base + arg_idx * 4);
            let arg_size: i32 = expression_code_size(ast_base, arg_expr_index);
            if arg_size < 0 {
                return -1;
            };
            total = total + arg_size;
            arg_idx = arg_idx + 1;
        };
        return total + 1 + leb_u32_len(callee_index);
    };
    if kind == 6 {
        let param_index: i32 = load_i32(entry_ptr + 4);
        if param_index < 0 {
            return -1;
        };
        return 1 + leb_u32_len(param_index);
    };
    if kind == 8 {
        let local_index: i32 = load_i32(entry_ptr + 4);
        if local_index < 0 {
            return -1;
        };
        return 1 + leb_u32_len(local_index);
    };
    if kind == 2
        || kind == 3
        || kind == 4
        || kind == 5
        || kind == 14
        || kind == 15
        || kind == 16
        || kind == 17
        || kind == 18
        || kind == 19
    {
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let left_size: i32 = expression_code_size(ast_base, left_index);
        if left_size < 0 {
            return -1;
        };
        let right_size: i32 = expression_code_size(ast_base, right_index);
        if right_size < 0 {
            return -1;
        };
        return left_size + right_size + 1;
    };
    if kind == 20 || kind == 21 {
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let left_size: i32 = expression_code_size(ast_base, left_index);
        if left_size < 0 {
            return -1;
        };
        let right_size: i32 = expression_code_size(ast_base, right_index);
        if right_size < 0 {
            return -1;
        };
        return left_size + right_size + 6;
    };
    if kind == 22 {
        let value_index: i32 = load_i32(entry_ptr + 4);
        let value_size: i32 = expression_code_size(ast_base, value_index);
        if value_size < 0 {
            return -1;
        };
        return value_size + 1;
    };
    if kind == 23 {
        let value_index: i32 = load_i32(entry_ptr + 4);
        let value_size: i32 = expression_code_size(ast_base, value_index);
        if value_size < 0 {
            return -1;
        };
        return value_size + 1;
    };
    if kind == 7 {
        let condition_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        let else_index: i32 = load_i32(entry_ptr + 12);
        let condition_size: i32 = expression_code_size(ast_base, condition_index);
        if condition_size < 0 {
            return -1;
        };
        let then_size: i32 = expression_code_size(ast_base, then_index);
        if then_size < 0 {
            return -1;
        };
        let else_size: i32 = expression_code_size(ast_base, else_index);
        if else_size < 0 {
            return -1;
        };
        return condition_size + then_size + else_size + 4;
    };
    if kind == 9 {
        let local_index: i32 = load_i32(entry_ptr + 4);
        let init_index: i32 = load_i32(entry_ptr + 8);
        let body_index: i32 = load_i32(entry_ptr + 12);
        let init_size: i32 = expression_code_size(ast_base, init_index);
        if init_size < 0 {
            return -1;
        };
        let body_size: i32 = expression_code_size(ast_base, body_index);
        if body_size < 0 {
            return -1;
        };
        return init_size + body_size + 1 + leb_u32_len(local_index);
    };
    if kind == 10 {
        let local_index: i32 = load_i32(entry_ptr + 4);
        let value_index: i32 = load_i32(entry_ptr + 8);
        let value_size: i32 = expression_code_size(ast_base, value_index);
        if value_size < 0 {
            return -1;
        };
        return value_size + 1 + leb_u32_len(local_index);
    };
    if kind == 11 {
        let first_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        let first_size: i32 = expression_code_size(ast_base, first_index);
        if first_size < 0 {
            return -1;
        };
        let then_size: i32 = expression_code_size(ast_base, then_index);
        if then_size < 0 {
            return -1;
        };
        return first_size + then_size + 1;
    };
    if kind == 12 {
        let body_index: i32 = load_i32(entry_ptr + 4);
        let body_size: i32 = expression_code_size(ast_base, body_index);
        if body_size < 0 {
            return -1;
        };
        return body_size + 10;
    };
    if kind == 13 {
        let branch_depth: i32 = load_i32(entry_ptr + 4);
        if branch_depth < 0 {
            return -1;
        };
        let value_index: i32 = load_i32(entry_ptr + 8);
        if value_index >= 0 {
            let value_size: i32 = expression_code_size(ast_base, value_index);
            if value_size < 0 {
                return -1;
            };
            return value_size + 1 + leb_u32_len(branch_depth);
        };
        let const_size: i32 = 1 + leb_i32_len(0);
        return const_size + 1 + leb_u32_len(branch_depth);
    };
    -1
}

fn emit_expression(base: i32, offset: i32, ast_base: i32, expr_index: i32) -> i32 {
    if expr_index < 0 {
        return -1;
    };
    if expr_index >= ast_expr_count(ast_base) {
        return -1;
    };
    let entry_ptr: i32 = ast_expr_entry_ptr(ast_base, expr_index);
    let kind: i32 = load_i32(entry_ptr);
    if kind == 0 {
        let value: i32 = load_i32(entry_ptr + 4);
        let mut out: i32 = offset;
        out = write_byte(base, out, 65);
        out = write_i32_leb(base, out, value);
        return out;
    };
    if kind == 1 {
        let metadata_ptr: i32 = load_i32(entry_ptr + 4);
        if metadata_ptr < 0 {
            return -1;
        };
        let callee_index: i32 = load_i32(call_metadata_callee_index_ptr(metadata_ptr));
        if callee_index < 0 {
            return -1;
        };
        let arg_count: i32 = call_metadata_arg_count(metadata_ptr);
        let args_base: i32 = call_metadata_args_base(metadata_ptr);
        let mut out: i32 = offset;
        let mut arg_idx: i32 = 0;
        loop {
            if arg_idx >= arg_count {
                break;
            };
            let arg_expr_index: i32 = load_i32(args_base + arg_idx * 4);
            out = emit_expression(base, out, ast_base, arg_expr_index);
            if out < 0 {
                return -1;
            };
            arg_idx = arg_idx + 1;
        };
        out = write_byte(base, out, 16);
        out = write_u32_leb(base, out, callee_index);
        return out;
    };
    if kind == 6 {
        let param_index: i32 = load_i32(entry_ptr + 4);
        if param_index < 0 {
            return -1;
        };
        let mut out: i32 = offset;
        out = write_byte(base, out, 32);
        out = write_u32_leb(base, out, param_index);
        return out;
    };
    if kind == 8 {
        let local_index: i32 = load_i32(entry_ptr + 4);
        if local_index < 0 {
            return -1;
        };
        let mut out: i32 = offset;
        out = write_byte(base, out, 32);
        out = write_u32_leb(base, out, local_index);
        return out;
    };
    if kind == 2
        || kind == 3
        || kind == 4
        || kind == 5
        || kind == 14
        || kind == 15
        || kind == 16
        || kind == 17
        || kind == 18
        || kind == 19
    {
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let mut out: i32 = emit_expression(base, offset, ast_base, left_index);
        if out < 0 {
            return -1;
        };
        out = emit_expression(base, out, ast_base, right_index);
        if out < 0 {
            return -1;
        };
        let opcode: i32 = if kind == 2 {
            106
        } else {
            if kind == 3 {
                107
            } else {
                if kind == 4 {
                    108
                } else {
                    if kind == 5 {
                        109
                    } else {
                        if kind == 14 {
                            70
                        } else {
                            if kind == 15 {
                                71
                            } else {
                                if kind == 16 {
                                    72
                                } else {
                                    if kind == 17 {
                                        74
                                    } else {
                                        if kind == 18 {
                                            76
                                        } else {
                                            78
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        out = write_byte(base, out, opcode);
        return out;
    };
    if kind == 20 {
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let mut out: i32 = emit_expression(base, offset, ast_base, left_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 4);
        out = write_byte(base, out, 127);
        out = write_byte(base, out, 65);
        out = write_i32_leb(base, out, 1);
        out = write_byte(base, out, 5);
        out = emit_expression(base, out, ast_base, right_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 11);
        return out;
    };
    if kind == 21 {
        let left_index: i32 = load_i32(entry_ptr + 4);
        let right_index: i32 = load_i32(entry_ptr + 8);
        let mut out: i32 = emit_expression(base, offset, ast_base, left_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 4);
        out = write_byte(base, out, 127);
        out = emit_expression(base, out, ast_base, right_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 5);
        out = write_byte(base, out, 65);
        out = write_i32_leb(base, out, 0);
        out = write_byte(base, out, 11);
        return out;
    };
    if kind == 22 {
        let value_index: i32 = load_i32(entry_ptr + 4);
        let mut out: i32 = emit_expression(base, offset, ast_base, value_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 69);
        return out;
    };
    if kind == 23 {
        let value_index: i32 = load_i32(entry_ptr + 4);
        let mut out: i32 = emit_expression(base, offset, ast_base, value_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 15);
        return out;
    };
    if kind == 7 {
        let condition_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        let else_index: i32 = load_i32(entry_ptr + 12);
        let mut out: i32 = emit_expression(base, offset, ast_base, condition_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 4);
        out = write_byte(base, out, 127);
        out = emit_expression(base, out, ast_base, then_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 5);
        out = emit_expression(base, out, ast_base, else_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 11);
        return out;
    };
    if kind == 9 {
        let local_index: i32 = load_i32(entry_ptr + 4);
        let init_index: i32 = load_i32(entry_ptr + 8);
        let body_index: i32 = load_i32(entry_ptr + 12);
        let mut out: i32 = emit_expression(base, offset, ast_base, init_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 33);
        out = write_u32_leb(base, out, local_index);
        out = emit_expression(base, out, ast_base, body_index);
        if out < 0 {
            return -1;
        };
        return out;
    };
    if kind == 10 {
        let local_index: i32 = load_i32(entry_ptr + 4);
        let value_index: i32 = load_i32(entry_ptr + 8);
        let mut out: i32 = emit_expression(base, offset, ast_base, value_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 34);
        out = write_u32_leb(base, out, local_index);
        return out;
    };
    if kind == 11 {
        let first_index: i32 = load_i32(entry_ptr + 4);
        let then_index: i32 = load_i32(entry_ptr + 8);
        let mut out: i32 = emit_expression(base, offset, ast_base, first_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 26);
        out = emit_expression(base, out, ast_base, then_index);
        if out < 0 {
            return -1;
        };
        return out;
    };
    if kind == 12 {
        let body_index: i32 = load_i32(entry_ptr + 4);
        let mut out: i32 = write_byte(base, offset, 2);
        out = write_byte(base, out, 127);
        out = write_byte(base, out, 3);
        out = write_byte(base, out, 64);
        out = emit_expression(base, out, ast_base, body_index);
        if out < 0 {
            return -1;
        };
        out = write_byte(base, out, 26);
        out = write_byte(base, out, 12);
        out = write_u32_leb(base, out, 0);
        out = write_byte(base, out, 11);
        out = write_byte(base, out, 0);
        out = write_byte(base, out, 11);
        return out;
    };
    if kind == 13 {
        let branch_depth: i32 = load_i32(entry_ptr + 4);
        if branch_depth < 0 {
            return -1;
        };
        let value_index: i32 = load_i32(entry_ptr + 8);
        let mut out: i32 = offset;
        if value_index >= 0 {
            out = emit_expression(base, out, ast_base, value_index);
            if out < 0 {
                return -1;
            };
        } else {
            out = write_byte(base, out, 65);
            out = write_i32_leb(base, out, 0);
        };
        out = write_byte(base, out, 12);
        out = write_u32_leb(base, out, branch_depth);
        return out;
    };
    -1
}

fn emit_type_section(base: i32, offset: i32, ast_base: i32, func_count: i32) -> i32 {
    let mut payload_size: i32 = leb_u32_len(func_count);
    let mut idx: i32 = 0;
    loop {
        if idx >= func_count {
            break;
        };
        let entry_ptr: i32 = ast_function_entry_ptr(ast_base, idx);
        let param_count: i32 = load_i32(entry_ptr + 8);
        payload_size = payload_size + 1;
        payload_size = payload_size + leb_u32_len(param_count);
        payload_size = payload_size + param_count;
        payload_size = payload_size + leb_u32_len(1);
        payload_size = payload_size + 1;
        idx = idx + 1;
    };

    let mut out: i32 = offset;
    out = write_byte(base, out, 1);
    out = write_u32_leb(base, out, payload_size);
    out = write_u32_leb(base, out, func_count);

    idx = 0;
    loop {
        if idx >= func_count {
            break;
        };
        let entry_ptr: i32 = ast_function_entry_ptr(ast_base, idx);
        let param_count: i32 = load_i32(entry_ptr + 8);
        out = write_byte(base, out, 96);
        out = write_u32_leb(base, out, param_count);
        let mut param_idx: i32 = 0;
        loop {
            if param_idx >= param_count {
                break;
            };
            out = write_byte(base, out, 127);
            param_idx = param_idx + 1;
        };
        out = write_u32_leb(base, out, 1);
        out = write_byte(base, out, 127);
        idx = idx + 1;
    };
    out
}

fn emit_function_section(base: i32, offset: i32, func_count: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 3);
    let payload_size: i32 = leb_u32_len(func_count) + func_count;
    out = write_u32_leb(base, out, payload_size);
    out = write_u32_leb(base, out, func_count);
    let mut idx: i32 = 0;
    loop {
        if idx >= func_count {
            break;
        };
        out = write_u32_leb(base, out, idx);
        idx = idx + 1;
    };
    out
}

fn emit_memory_section(base: i32, offset: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 5);
    let payload_size: i32 = leb_u32_len(1) + 1 + leb_u32_len(16) + leb_u32_len(16);
    out = write_u32_leb(base, out, payload_size);
    out = write_u32_leb(base, out, 1);
    out = write_byte(base, out, 1);
    out = write_u32_leb(base, out, 16);
    out = write_u32_leb(base, out, 16);
    out
}

fn emit_export_section(base: i32, offset: i32, ast_base: i32, func_count: i32) -> i32 {
    let mut payload_size: i32 = leb_u32_len(func_count + 1);
    payload_size = payload_size + leb_u32_len(6) + 6 + 1 + leb_u32_len(0);
    let mut idx: i32 = 0;
    loop {
        if idx >= func_count {
            break;
        };
        let entry_ptr: i32 = ast_function_entry_ptr(ast_base, idx);
        let name_len: i32 = load_i32(entry_ptr + 4);
        payload_size = payload_size + leb_u32_len(name_len) + name_len + 1 + leb_u32_len(idx);
        idx = idx + 1;
    };

    let mut out: i32 = offset;
    out = write_byte(base, out, 7);
    out = write_u32_leb(base, out, payload_size);
    out = write_u32_leb(base, out, func_count + 1);

    out = write_u32_leb(base, out, 6);
    out = write_byte(base, out, 109);
    out = write_byte(base, out, 101);
    out = write_byte(base, out, 109);
    out = write_byte(base, out, 111);
    out = write_byte(base, out, 114);
    out = write_byte(base, out, 121);
    out = write_byte(base, out, 2);
    out = write_u32_leb(base, out, 0);

    idx = 0;
    loop {
        if idx >= func_count {
            break;
        };
        let entry_ptr: i32 = ast_function_entry_ptr(ast_base, idx);
        let name_ptr: i32 = load_i32(entry_ptr);
        let name_len: i32 = load_i32(entry_ptr + 4);
        out = write_u32_leb(base, out, name_len);
        let mut byte_idx: i32 = 0;
        loop {
            if byte_idx >= name_len {
                break;
            };
            let byte: i32 = load_u8(name_ptr + byte_idx);
            out = write_byte(base, out, byte);
            byte_idx = byte_idx + 1;
        };
        out = write_byte(base, out, 0);
        out = write_u32_leb(base, out, idx);
        idx = idx + 1;
    };
    out
}

fn emit_code_section(base: i32, offset: i32, ast_base: i32, func_count: i32) -> i32 {
    let mut payload_size: i32 = leb_u32_len(func_count);
    let mut idx: i32 = 0;
    loop {
        if idx >= func_count {
            break;
        };
        let entry_ptr: i32 = ast_function_entry_ptr(ast_base, idx);
        let body_kind: i32 = load_i32(entry_ptr + 12);
        let locals_count: i32 = load_i32(entry_ptr + 20);
        let locals_decl_size: i32 = if locals_count > 0 {
            leb_u32_len(1) + leb_u32_len(locals_count) + 1
        } else {
            leb_u32_len(0)
        };
        let mut body_size: i32 = 0;
        if body_kind == 0 {
            let literal_value: i32 = load_i32(entry_ptr + 16);
            body_size = locals_decl_size + 1 + leb_i32_len(literal_value) + 1;
        } else {
            if body_kind == 1 {
                let metadata_ptr: i32 = load_i32(entry_ptr + 16);
                if metadata_ptr < 0 {
                    return -1;
                };
                let callee_index: i32 = load_i32(call_metadata_callee_index_ptr(metadata_ptr));
                if callee_index < 0 {
                    return -1;
                };
                let arg_count: i32 = call_metadata_arg_count(metadata_ptr);
                let args_base: i32 = call_metadata_args_base(metadata_ptr);
                let mut args_size: i32 = 0;
                let mut arg_idx: i32 = 0;
                loop {
                    if arg_idx >= arg_count {
                        break;
                    };
                    let arg_expr_index: i32 = load_i32(args_base + arg_idx * 4);
                    let arg_size: i32 = expression_code_size(ast_base, arg_expr_index);
                    if arg_size < 0 {
                        return -1;
                    };
                    args_size = args_size + arg_size;
                    arg_idx = arg_idx + 1;
                };
                body_size = locals_decl_size + args_size + 1 + leb_u32_len(callee_index) + 1;
            } else {
                let expr_index: i32 = load_i32(entry_ptr + 16);
                let expr_size: i32 = expression_code_size(ast_base, expr_index);
                if expr_size < 0 {
                    return -1;
                };
                body_size = locals_decl_size + expr_size + 1;
            };
        };
        payload_size = payload_size + leb_u32_len(body_size) + body_size;
        idx = idx + 1;
    };

    let mut out: i32 = offset;
    out = write_byte(base, out, 10);
    out = write_u32_leb(base, out, payload_size);
    out = write_u32_leb(base, out, func_count);

    idx = 0;
    loop {
        if idx >= func_count {
            break;
        };
        let entry_ptr: i32 = ast_function_entry_ptr(ast_base, idx);
        let body_kind: i32 = load_i32(entry_ptr + 12);
        let locals_count: i32 = load_i32(entry_ptr + 20);
        let locals_decl_size: i32 = if locals_count > 0 {
            leb_u32_len(1) + leb_u32_len(locals_count) + 1
        } else {
            leb_u32_len(0)
        };
        let mut body_size: i32 = 0;
        if body_kind == 0 {
            let literal_value: i32 = load_i32(entry_ptr + 16);
            body_size = locals_decl_size + 1 + leb_i32_len(literal_value) + 1;
            out = write_u32_leb(base, out, body_size);
            if locals_count > 0 {
                out = write_u32_leb(base, out, 1);
                out = write_u32_leb(base, out, locals_count);
                out = write_byte(base, out, 127);
            } else {
                out = write_u32_leb(base, out, 0);
            };
            out = write_byte(base, out, 65);
            out = write_i32_leb(base, out, literal_value);
            out = write_byte(base, out, 11);
        } else {
            if body_kind == 1 {
                let metadata_ptr: i32 = load_i32(entry_ptr + 16);
                if metadata_ptr < 0 {
                    return -1;
                };
                let callee_index: i32 = load_i32(call_metadata_callee_index_ptr(metadata_ptr));
                if callee_index < 0 {
                    return -1;
                };
                let arg_count: i32 = call_metadata_arg_count(metadata_ptr);
                let args_base: i32 = call_metadata_args_base(metadata_ptr);
                let mut args_size: i32 = 0;
                let mut arg_idx: i32 = 0;
                loop {
                    if arg_idx >= arg_count {
                        break;
                    };
                    let arg_expr_index: i32 = load_i32(args_base + arg_idx * 4);
                    let arg_size: i32 = expression_code_size(ast_base, arg_expr_index);
                    if arg_size < 0 {
                        return -1;
                    };
                    args_size = args_size + arg_size;
                    arg_idx = arg_idx + 1;
                };
                body_size = locals_decl_size + args_size + 1 + leb_u32_len(callee_index) + 1;
                out = write_u32_leb(base, out, body_size);
                if locals_count > 0 {
                    out = write_u32_leb(base, out, 1);
                    out = write_u32_leb(base, out, locals_count);
                    out = write_byte(base, out, 127);
                } else {
                    out = write_u32_leb(base, out, 0);
                };
                let mut emit_idx: i32 = 0;
                loop {
                    if emit_idx >= arg_count {
                        break;
                    };
                    let arg_expr_index: i32 = load_i32(args_base + emit_idx * 4);
                    out = emit_expression(base, out, ast_base, arg_expr_index);
                    if out < 0 {
                        return -1;
                    };
                    emit_idx = emit_idx + 1;
                };
                out = write_byte(base, out, 16);
                out = write_u32_leb(base, out, callee_index);
                out = write_byte(base, out, 11);
            } else {
                let expr_index: i32 = load_i32(entry_ptr + 16);
                let expr_size: i32 = expression_code_size(ast_base, expr_index);
                if expr_size < 0 {
                    return -1;
                };
                body_size = locals_decl_size + expr_size + 1;
                out = write_u32_leb(base, out, body_size);
                if locals_count > 0 {
                    out = write_u32_leb(base, out, 1);
                    out = write_u32_leb(base, out, locals_count);
                    out = write_byte(base, out, 127);
                } else {
                    out = write_u32_leb(base, out, 0);
                };
                out = emit_expression(base, out, ast_base, expr_index);
                if out < 0 {
                    return -1;
                };
                out = write_byte(base, out, 11);
            };
        };
        idx = idx + 1;
    };
    out
}

fn emit_program(out_ptr: i32, ast_base: i32, func_count: i32) -> i32 {
    let mut offset: i32 = 0;
    offset = write_magic(out_ptr, offset);
    offset = emit_type_section(out_ptr, offset, ast_base, func_count);
    offset = emit_function_section(out_ptr, offset, func_count);
    offset = emit_memory_section(out_ptr, offset);
    offset = emit_export_section(out_ptr, offset, ast_base, func_count);
    offset = emit_code_section(out_ptr, offset, ast_base, func_count);
    offset
}

fn initialize_layout(out_ptr: i32) {
    store_i32(scratch_instr_offset_ptr(out_ptr), 0);
    store_i32(scratch_expr_type_ptr(out_ptr), -1);
    store_i32(scratch_functions_count_ptr(out_ptr), 0);
    store_i32(scratch_types_count_ptr(out_ptr), 0);
}

fn compile(input_ptr: i32, input_len: i32, out_ptr: i32) -> i32 {
    if input_len <= 0 {
        return -1;
    };

    initialize_layout(out_ptr);

    let ast_base: i32 = ast_program_base(out_ptr);
    ast_reset(ast_base);

    let func_count: i32 = parse_program(input_ptr, input_len, ast_base);
    if func_count <= 0 {
        return -1;
    };

    if validate_program(ast_base, func_count) < 0 {
        return -1;
    };

    store_i32(scratch_functions_count_ptr(out_ptr), func_count);

    let produced_len: i32 = emit_program(out_ptr, ast_base, func_count);
    if produced_len <= 0 {
        return -1;
    };
    produced_len
}

fn main() -> i32 {
    0
}
