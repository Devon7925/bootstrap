fn write_byte(base: i32, offset: i32, value: i32) -> i32 {
    store_u8(base + offset, value & 255);
    offset + 1
}

fn emit_i32_const(base: i32, offset: i32, value: i32) -> i32 {
    let mut out: i32 = write_byte(base, offset, 65);
    out = write_i32_leb(base, out, value);
    out
}

fn emit_add(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 106)
}

fn emit_sub(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 107)
}

fn emit_mul(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 108)
}

fn emit_div(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 109)
}

fn emit_end(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 11)
}

fn emit_local_get(base: i32, offset: i32, index: i32) -> i32 {
    let mut out: i32 = write_byte(base, offset, 32);
    out = write_u32_leb(base, out, index);
    out
}

fn emit_local_set(base: i32, offset: i32, index: i32) -> i32 {
    let mut out: i32 = write_byte(base, offset, 33);
    out = write_u32_leb(base, out, index);
    out
}

fn emit_return(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 15)
}

fn emit_eq(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 70)
}

fn emit_ne(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 71)
}

fn emit_lt(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 72)
}

fn emit_gt(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 74)
}

fn emit_le(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 76)
}

fn emit_ge(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 78)
}

fn emit_eqz(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 69)
}

fn emit_and(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 113)
}

fn emit_or(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 114)
}

fn emit_if(base: i32, offset: i32, block_type: i32) -> i32 {
    let mut out: i32 = write_byte(base, offset, 4);
    out = write_byte(base, out, block_type);
    out
}

fn emit_else(base: i32, offset: i32) -> i32 {
    write_byte(base, offset, 5)
}

fn is_identifier_start(byte: i32) -> bool {
    (byte >= 65 && byte <= 90) || (byte >= 97 && byte <= 122) || byte == 95
}

fn is_identifier_continue(byte: i32) -> bool {
    is_identifier_start(byte) || (byte >= 48 && byte <= 57)
}

fn identifiers_equal(
    base: i32,
    len: i32,
    a_start: i32,
    a_len: i32,
    b_start: i32,
    b_len: i32
) -> bool {
    if a_len != b_len {
        return false;
    };
    if a_len < 0 {
        return false;
    };
    if a_start < 0 || b_start < 0 {
        return false;
    };
    if a_start + a_len > len {
        return false;
    };
    if b_start + b_len > len {
        return false;
    };
    let mut idx: i32 = 0;
    loop {
        if idx >= a_len {
            break;
        };
        let a_byte: i32 = load_u8(base + a_start + idx);
        let b_byte: i32 = load_u8(base + b_start + idx);
        if a_byte != b_byte {
            return false;
        };
        idx = idx + 1;
    };
    true
}

fn locals_find(
    base: i32,
    len: i32,
    locals_base: i32,
    locals_count_ptr: i32,
    name_start: i32,
    name_len: i32
) -> i32 {
    let count: i32 = load_i32(locals_count_ptr);
    let mut idx: i32 = 0;
    loop {
        if idx >= count {
            break;
        };
        let entry: i32 = locals_base + idx * 16;
        let stored_start: i32 = load_i32(entry);
        let stored_len: i32 = load_i32(entry + 4);
        if identifiers_equal(
            base,
            len,
            stored_start,
            stored_len,
            name_start,
            name_len
        ) {
            return load_i32(entry + 8);
        };
        idx = idx + 1;
    };
    -1
}

fn locals_store_entry(
    locals_base: i32,
    locals_count_ptr: i32,
    name_start: i32,
    name_len: i32,
    local_index: i32,
    is_mut: bool
) {
    let entry: i32 = locals_base + local_index * 16;
    store_i32(entry, name_start);
    store_i32(entry + 4, name_len);
    store_i32(entry + 8, local_index);
    let mut mut_flag: i32 = 0;
    if is_mut {
        mut_flag = 1;
    };
    store_i32(entry + 12, mut_flag);
    store_i32(locals_count_ptr, local_index + 1);
}

fn locals_is_mutable(locals_base: i32, local_index: i32) -> bool {
    let entry: i32 = locals_base + local_index * 16;
    load_i32(entry + 12) != 0
}

fn write_u32_leb(base: i32, offset: i32, value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut out: i32 = offset;
    loop {
        let mut byte: i32 = remaining & 127;
        remaining = remaining >> 7;
        if remaining != 0 {
            byte = byte | 128;
        };
        out = write_byte(base, out, byte);
        if remaining == 0 {
            break;
        };
    };
    out
}

fn write_i32_leb(base: i32, offset: i32, value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut out: i32 = offset;
    loop {
        let byte: i32 = remaining & 127;
        remaining = remaining >> 7;
        let sign_bit: i32 = byte & 64;
        let done: bool = (remaining == 0 && sign_bit == 0) || (remaining == -1 && sign_bit != 0);
        let mut out_byte: i32 = byte;
        if !done {
            out_byte = out_byte | 128;
        };
        out = write_byte(base, out, out_byte);
        if done {
            break;
        };
    };
    out
}

fn leb_u32_len(value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut count: i32 = 0;
    loop {
        count = count + 1;
        remaining = remaining >> 7;
        if remaining == 0 {
            break;
        };
    };
    count
}

fn leb_i32_len(value: i32) -> i32 {
    let mut remaining: i32 = value;
    let mut count: i32 = 0;
    loop {
        let byte: i32 = remaining & 127;
        remaining = remaining >> 7;
        let sign_bit: i32 = byte & 64;
        let done: bool = (remaining == 0 && sign_bit == 0) || (remaining == -1 && sign_bit != 0);
        count = count + 1;
        if done {
            break;
        };
    };
    count
}

fn write_magic(base: i32, offset: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 0);
    out = write_byte(base, out, 97);
    out = write_byte(base, out, 115);
    out = write_byte(base, out, 109);
    out = write_byte(base, out, 1);
    out = write_byte(base, out, 0);
    out = write_byte(base, out, 0);
    out = write_byte(base, out, 0);
    out
}

fn is_whitespace(byte: i32) -> bool {
    byte == 32 || byte == 9 || byte == 10 || byte == 13
}

fn skip_whitespace(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = offset;
    loop {
        if idx >= len {
            break;
        };
        let byte: i32 = load_u8(base + idx);
        if !is_whitespace(byte) {
            break;
        };
        idx = idx + 1;
    };
    idx
}

fn expect_char(base: i32, len: i32, offset: i32, expected: i32) -> i32 {
    if offset >= len {
        return -1;
    };
    let byte: i32 = load_u8(base + offset);
    if byte != expected {
        return -1;
    };
    offset + 1
}

fn expect_keyword_fn(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = expect_char(base, len, offset, 102);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 110);
    if idx < 0 {
        return -1;
    };
    idx
}

fn expect_keyword_let(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = expect_char(base, len, offset, 108);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 101);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 116);
    if idx < 0 {
        return -1;
    };
    idx
}

fn expect_keyword_main(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = expect_char(base, len, offset, 109);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 97);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 105);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 110);
    if idx < 0 {
        return -1;
    };
    idx
}

fn expect_keyword_i32(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = expect_char(base, len, offset, 105);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 51);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 50);
    if idx < 0 {
        return -1;
    };
    idx
}

fn peek_byte(base: i32, len: i32, offset: i32) -> i32 {
    if offset >= len {
        -1
    } else {
        load_u8(base + offset)
    }
}

fn write_type_section(base: i32, offset: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 1);
    out = write_u32_leb(base, out, 5);
    out = write_byte(base, out, 1);
    out = write_byte(base, out, 96);
    out = write_byte(base, out, 0);
    out = write_byte(base, out, 1);
    out = write_byte(base, out, 127);
    out
}

fn write_function_section(base: i32, offset: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 3);
    out = write_u32_leb(base, out, 2);
    out = write_u32_leb(base, out, 1);
    out = write_u32_leb(base, out, 0);
    out
}

fn write_memory_section(base: i32, offset: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 5);
    out = write_u32_leb(base, out, 3);
    out = write_u32_leb(base, out, 1);
    out = write_u32_leb(base, out, 0);
    out = write_u32_leb(base, out, 1);
    out
}

fn write_export_section(base: i32, offset: i32) -> i32 {
    let mut out: i32 = offset;
    out = write_byte(base, out, 7);
    out = write_u32_leb(base, out, 17);
    out = write_u32_leb(base, out, 2);
    out = write_u32_leb(base, out, 6);
    out = write_byte(base, out, 109);
    out = write_byte(base, out, 101);
    out = write_byte(base, out, 109);
    out = write_byte(base, out, 111);
    out = write_byte(base, out, 114);
    out = write_byte(base, out, 121);
    out = write_byte(base, out, 2);
    out = write_u32_leb(base, out, 0);
    out = write_u32_leb(base, out, 4);
    out = write_byte(base, out, 109);
    out = write_byte(base, out, 97);
    out = write_byte(base, out, 105);
    out = write_byte(base, out, 110);
    out = write_byte(base, out, 0);
    out = write_u32_leb(base, out, 0);
    out
}

fn write_code_section(
    base: i32,
    offset: i32,
    instr_base: i32,
    instr_len: i32,
    local_count: i32
) -> i32 {
    let local_decl_size: i32 = if local_count == 0 {
        1
    } else {
        let count_len: i32 = leb_u32_len(local_count);
        1 + count_len + 1
    };
    let body_size: i32 = local_decl_size + instr_len;
    let body_size_len: i32 = leb_u32_len(body_size);
    let section_size: i32 = 1 + body_size_len + body_size;
    let mut out: i32 = offset;
    out = write_byte(base, out, 10);
    out = write_u32_leb(base, out, section_size);
    out = write_u32_leb(base, out, 1);
    out = write_u32_leb(base, out, body_size);
    if local_count == 0 {
        out = write_byte(base, out, 0);
    } else {
        out = write_byte(base, out, 1);
        out = write_u32_leb(base, out, local_count);
        out = write_byte(base, out, 127);
    };
    let mut idx: i32 = 0;
    loop {
        if idx >= instr_len {
            break;
        };
        let byte: i32 = load_u8(instr_base + idx);
        out = write_byte(base, out, byte);
        idx = idx + 1;
    };
    out
}

fn write_constant_module(base: i32, instr_base: i32, instr_len: i32, local_count: i32) -> i32 {
    let mut offset: i32 = 0;
    offset = write_magic(base, offset);
    offset = write_type_section(base, offset);
    offset = write_function_section(base, offset);
    offset = write_memory_section(base, offset);
    offset = write_export_section(base, offset);
    write_code_section(base, offset, instr_base, instr_len, local_count)
}

fn parse_expression(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    parse_or(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    )
}

fn parse_or(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = parse_and(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            break;
        };

        let first: i32 = peek_byte(base, len, idx);
        if first != 124 {
            if first == 41 || first == 59 || first == 125 || first == 123 {
                break;
            };
            return idx;
        };
        if idx + 1 >= len {
            return -1;
        };
        let second: i32 = peek_byte(base, len, idx + 1);
        if second != 124 {
            return -1;
        };
        idx = idx + 2;
        let next_idx: i32 = parse_and(
            base,
            len,
            idx,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if next_idx < 0 {
            return -1;
        };
        idx = next_idx;
        let mut instr_offset: i32 = load_i32(instr_offset_ptr);
        instr_offset = emit_or(instr_base, instr_offset);
        store_i32(instr_offset_ptr, instr_offset);
    };

    idx
}

fn parse_and(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = parse_equality(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            break;
        };

        let first: i32 = peek_byte(base, len, idx);
        if first != 38 {
            if first == 41 || first == 59 || first == 125 || first == 123 {
                break;
            };
            return idx;
        };
        if idx + 1 >= len {
            return -1;
        };
        let second: i32 = peek_byte(base, len, idx + 1);
        if second != 38 {
            return -1;
        };
        idx = idx + 2;
        let next_idx: i32 = parse_equality(
            base,
            len,
            idx,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if next_idx < 0 {
            return -1;
        };
        idx = next_idx;
        let mut instr_offset: i32 = load_i32(instr_offset_ptr);
        instr_offset = emit_and(instr_base, instr_offset);
        store_i32(instr_offset_ptr, instr_offset);
    };

    idx
}

fn parse_equality(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = parse_comparison(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            break;
        };

        if idx + 1 >= len {
            break;
        };
        let first: i32 = peek_byte(base, len, idx);
        let second: i32 = peek_byte(base, len, idx + 1);
        if first == 61 && second == 61 {
            idx = idx + 2;
            let next_idx: i32 = parse_comparison(
                base,
                len,
                idx,
                instr_base,
                instr_offset_ptr,
                locals_base,
                locals_count_ptr
            );
            if next_idx < 0 {
                return -1;
            };
            idx = next_idx;
            let mut instr_offset: i32 = load_i32(instr_offset_ptr);
            instr_offset = emit_eq(instr_base, instr_offset);
            store_i32(instr_offset_ptr, instr_offset);
            continue;
        };
        if first == 33 && second == 61 {
            idx = idx + 2;
            let next_idx: i32 = parse_comparison(
                base,
                len,
                idx,
                instr_base,
                instr_offset_ptr,
                locals_base,
                locals_count_ptr
            );
            if next_idx < 0 {
                return -1;
            };
            idx = next_idx;
            let mut instr_offset: i32 = load_i32(instr_offset_ptr);
            instr_offset = emit_ne(instr_base, instr_offset);
            store_i32(instr_offset_ptr, instr_offset);
            continue;
        };

        if first == 41 || first == 59 || first == 125 || first == 123 {
            break;
        };

        break;
    };

    idx
}

fn parse_comparison(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = parse_addition(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            break;
        };

        let op_byte: i32 = peek_byte(base, len, idx);
        let mut consumed: i32 = 0;
        let mut instr_kind: i32 = 0;

        if op_byte == 60 { // '<'
            if idx + 1 < len && peek_byte(base, len, idx + 1) == 61 {
                consumed = 2;
                instr_kind = 2; // <=
            } else {
                consumed = 1;
                instr_kind = 0; // <
            };
        } else if op_byte == 62 { // '>'
            if idx + 1 < len && peek_byte(base, len, idx + 1) == 61 {
                consumed = 2;
                instr_kind = 3; // >=
            } else {
                consumed = 1;
                instr_kind = 1; // >
            };
        } else if op_byte == 41 || op_byte == 59 || op_byte == 125 || op_byte == 123 {
            break;
        } else {
            break;
        };

        if consumed == 0 {
            break;
        };

        idx = idx + consumed;
        let next_idx: i32 = parse_addition(
            base,
            len,
            idx,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if next_idx < 0 {
            return -1;
        };
        idx = next_idx;

        let mut instr_offset: i32 = load_i32(instr_offset_ptr);
        if instr_kind == 0 {
            instr_offset = emit_lt(instr_base, instr_offset);
        } else if instr_kind == 1 {
            instr_offset = emit_gt(instr_base, instr_offset);
        } else if instr_kind == 2 {
            instr_offset = emit_le(instr_base, instr_offset);
        } else {
            instr_offset = emit_ge(instr_base, instr_offset);
        };
        store_i32(instr_offset_ptr, instr_offset);
    };

    idx
}

fn parse_addition(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = parse_multiplication(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            break;
        };

        let op_byte: i32 = peek_byte(base, len, idx);
        if op_byte == 43 || op_byte == 45 {
            idx = idx + 1;
            let next_idx: i32 = parse_multiplication(
                base,
                len,
                idx,
                instr_base,
                instr_offset_ptr,
                locals_base,
                locals_count_ptr
            );
            if next_idx < 0 {
                return -1;
            };
            idx = next_idx;

            let mut instr_offset: i32 = load_i32(instr_offset_ptr);
            if op_byte == 43 {
                instr_offset = emit_add(instr_base, instr_offset);
            } else {
                instr_offset = emit_sub(instr_base, instr_offset);
            };
            store_i32(instr_offset_ptr, instr_offset);
            continue;
        };

        if op_byte == 41 || op_byte == 59 || op_byte == 125 || op_byte == 123 {
            break;
        };

        break;
    };

    idx
}

fn parse_multiplication(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = parse_unary(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            break;
        };

        let op_byte: i32 = peek_byte(base, len, idx);
        if op_byte == 42 || op_byte == 47 {
            idx = idx + 1;
            let next_idx: i32 = parse_unary(
                base,
                len,
                idx,
                instr_base,
                instr_offset_ptr,
                locals_base,
                locals_count_ptr
            );
            if next_idx < 0 {
                return -1;
            };
            idx = next_idx;

            let mut instr_offset: i32 = load_i32(instr_offset_ptr);
            if op_byte == 42 {
                instr_offset = emit_mul(instr_base, instr_offset);
            } else {
                instr_offset = emit_div(instr_base, instr_offset);
            };
            store_i32(instr_offset_ptr, instr_offset);
            continue;
        };

        if op_byte == 41 || op_byte == 59 || op_byte == 125 || op_byte == 123 {
            break;
        };

        break;
    };

    idx
}

fn parse_unary(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = skip_whitespace(base, len, offset);
    if idx >= len {
        return -1;
    };

    let mut minus_count: i32 = 0;
    let mut not_count: i32 = 0;

    loop {
        if idx >= len {
            return -1;
        };
        let byte: i32 = peek_byte(base, len, idx);
        if byte == 45 {
            minus_count = minus_count + 1;
            idx = idx + 1;
        } else if byte == 43 {
            idx = idx + 1;
        } else if byte == 33 {
            not_count = not_count + 1;
            idx = idx + 1;
        } else {
            break;
        };
        idx = skip_whitespace(base, len, idx);
    };

    let needs_negate: bool = (minus_count & 1) != 0;
    if needs_negate {
        let mut instr_offset: i32 = load_i32(instr_offset_ptr);
        instr_offset = emit_i32_const(instr_base, instr_offset, 0);
        store_i32(instr_offset_ptr, instr_offset);
    };

    let mut next_idx: i32 = parse_primary(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if next_idx < 0 {
        return -1;
    };

    if needs_negate {
        let mut instr_offset: i32 = load_i32(instr_offset_ptr);
        instr_offset = emit_sub(instr_base, instr_offset);
        store_i32(instr_offset_ptr, instr_offset);
    };

    if (not_count & 1) != 0 {
        let mut instr_offset: i32 = load_i32(instr_offset_ptr);
        instr_offset = emit_eqz(instr_base, instr_offset);
        store_i32(instr_offset_ptr, instr_offset);
    };

    next_idx
}

fn parse_primary(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = skip_whitespace(base, len, offset);
    if idx >= len {
        return -1;
    };

    let head_byte: i32 = peek_byte(base, len, idx);
    if head_byte == 105 {
        if idx + 1 >= len {
            return -1;
        };
        let second: i32 = peek_byte(base, len, idx + 1);
        if second == 102 {
            let after_keyword: i32 = idx + 2;
            if after_keyword == len || !is_identifier_continue(peek_byte(base, len, after_keyword)) {
                return parse_if_expression(
                    base,
                    len,
                    idx,
                    instr_base,
                    instr_offset_ptr,
                    locals_base,
                    locals_count_ptr
                );
            };
        };
    };

    if head_byte == 40 {
        idx = idx + 1;
        let inner_idx: i32 = parse_expression(
            base,
            len,
            idx,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if inner_idx < 0 {
            return -1;
        };
        idx = skip_whitespace(base, len, inner_idx);
        idx = expect_char(base, len, idx, 41);
        return idx;
    };

    if idx + 4 <= len {
        let t: i32 = load_u8(base + idx);
        let r: i32 = load_u8(base + idx + 1);
        let u: i32 = load_u8(base + idx + 2);
        let e: i32 = load_u8(base + idx + 3);
        if t == 116 && r == 114 && u == 117 && e == 101 {
            let after: i32 = idx + 4;
            let mut valid_literal: bool = false;
            if after == len {
                valid_literal = true;
            } else {
                let next_byte: i32 = peek_byte(base, len, after);
                if !is_identifier_continue(next_byte) {
                    valid_literal = true;
                };
            };
            if valid_literal {
                let mut instr_offset: i32 = load_i32(instr_offset_ptr);
                instr_offset = emit_i32_const(instr_base, instr_offset, 1);
                store_i32(instr_offset_ptr, instr_offset);
                return after;
            };
        };
    };

    if idx + 5 <= len {
        let f: i32 = load_u8(base + idx);
        let a: i32 = load_u8(base + idx + 1);
        let l: i32 = load_u8(base + idx + 2);
        let s: i32 = load_u8(base + idx + 3);
        let e: i32 = load_u8(base + idx + 4);
        if f == 102 && a == 97 && l == 108 && s == 115 && e == 101 {
            let after: i32 = idx + 5;
            let mut valid_literal: bool = false;
            if after == len {
                valid_literal = true;
            } else {
                let next_byte: i32 = peek_byte(base, len, after);
                if !is_identifier_continue(next_byte) {
                    valid_literal = true;
                };
            };
            if valid_literal {
                let mut instr_offset: i32 = load_i32(instr_offset_ptr);
                instr_offset = emit_i32_const(instr_base, instr_offset, 0);
                store_i32(instr_offset_ptr, instr_offset);
                return after;
            };
        };
    };

    if is_identifier_start(head_byte) {
        let ident_start: i32 = idx;
        let mut ident_len: i32 = 0;
        loop {
            if idx >= len {
                break;
            };
            let ch: i32 = peek_byte(base, len, idx);
            if ident_len == 0 {
                if !is_identifier_start(ch) {
                    break;
                };
            } else if !is_identifier_continue(ch) {
                break;
            };
            ident_len = ident_len + 1;
            idx = idx + 1;
        };
        if ident_len == 0 {
            return -1;
        };
        let local_index: i32 = locals_find(
            base,
            len,
            locals_base,
            locals_count_ptr,
            ident_start,
            ident_len
        );
        if local_index < 0 {
            return -1;
        };
        let mut instr_offset: i32 = load_i32(instr_offset_ptr);
        instr_offset = emit_local_get(instr_base, instr_offset, local_index);
        store_i32(instr_offset_ptr, instr_offset);
        return idx;
    };

    if head_byte < 48 || head_byte > 57 {
        return -1;
    };

    let mut value: i32 = 0;
    let mut has_digit: bool = false;
    loop {
        if idx >= len {
            break;
        };
        let digit_byte: i32 = peek_byte(base, len, idx);
        if digit_byte < 48 || digit_byte > 57 {
            break;
        };
        let digit: i32 = digit_byte - 48;
        value = value * 10 + digit;
        has_digit = true;
        idx = idx + 1;
    };

    if !has_digit {
        return -1;
    };

    let mut instr_offset: i32 = load_i32(instr_offset_ptr);
    instr_offset = emit_i32_const(instr_base, instr_offset, value);
    store_i32(instr_offset_ptr, instr_offset);

    idx
}

fn expect_keyword_if(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = expect_char(base, len, offset, 105);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 102);
    if idx < 0 {
        return -1;
    };
    idx
}

fn expect_keyword_return(base: i32, len: i32, offset: i32) -> i32 {
    let mut idx: i32 = expect_char(base, len, offset, 114);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 101);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 116);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 117);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 114);
    if idx < 0 {
        return -1;
    };
    idx = expect_char(base, len, idx, 110);
    if idx < 0 {
        return -1;
    };
    idx
}

fn parse_return_statement(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = expect_keyword_return(base, len, offset);
    if idx < 0 {
        return -1;
    };
    if idx < len {
        let after_byte: i32 = peek_byte(base, len, idx);
        if !is_whitespace(after_byte) {
            return -1;
        };
    };
    idx = skip_whitespace(base, len, idx);
    idx = parse_expression(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };
    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 59);
    if idx < 0 {
        return -1;
    };

    let mut instr_offset: i32 = load_i32(instr_offset_ptr);
    instr_offset = emit_return(instr_base, instr_offset);
    store_i32(instr_offset_ptr, instr_offset);

    idx
}

fn parse_expression_statement(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = parse_expression(
        base,
        len,
        offset,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };
    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 59);
    if idx < 0 {
        return -1;
    };
    idx
}

fn parse_statement(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = skip_whitespace(base, len, offset);
    if idx >= len {
        return -1;
    };

    if idx + 3 <= len {
        let l: i32 = peek_byte(base, len, idx);
        if l == 108 {
            let e: i32 = peek_byte(base, len, idx + 1);
            let t: i32 = peek_byte(base, len, idx + 2);
            if e == 101 && t == 116 {
                let after_keyword: i32 = idx + 3;
                if after_keyword >= len || !is_identifier_continue(peek_byte(base, len, after_keyword)) {
                    return parse_let_statement(
                        base,
                        len,
                        idx,
                        instr_base,
                        instr_offset_ptr,
                        locals_base,
                        locals_count_ptr
                    );
                };
            };
        };
    };

    if idx + 6 <= len {
        let r: i32 = peek_byte(base, len, idx);
        if r == 114 {
            let e: i32 = peek_byte(base, len, idx + 1);
            let t: i32 = peek_byte(base, len, idx + 2);
            let u: i32 = peek_byte(base, len, idx + 3);
            let rn: i32 = peek_byte(base, len, idx + 4);
            let n: i32 = peek_byte(base, len, idx + 5);
            if e == 101 && t == 116 && u == 117 && rn == 114 && n == 110 {
                let after_keyword: i32 = idx + 6;
                if after_keyword >= len || !is_identifier_continue(peek_byte(base, len, after_keyword)) {
                    return parse_return_statement(
                        base,
                        len,
                        idx,
                        instr_base,
                        instr_offset_ptr,
                        locals_base,
                        locals_count_ptr
                    );
                };
            };
        };
    };

    if idx + 2 <= len {
        let i_char: i32 = peek_byte(base, len, idx);
        if i_char == 105 {
            let f_char: i32 = peek_byte(base, len, idx + 1);
            if f_char == 102 {
                let after_keyword: i32 = idx + 2;
                if after_keyword >= len || !is_identifier_continue(peek_byte(base, len, after_keyword)) {
                    return parse_if_statement(
                        base,
                        len,
                        idx,
                        instr_base,
                        instr_offset_ptr,
                        locals_base,
                        locals_count_ptr
                    );
                };
            };
        };
    };

    let assignment_offset: i32 = parse_assignment_statement(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if assignment_offset == -1 {
        return -1;
    };
    if assignment_offset >= 0 {
        return assignment_offset;
    };

    parse_expression_statement(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    )
}

fn parse_block_statements(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = offset;
    loop {
        idx = skip_whitespace(base, len, idx);
        if idx >= len {
            break -1;
        };
        let byte: i32 = peek_byte(base, len, idx);
        if byte == 125 {
            break idx + 1;
        };
        let next_idx: i32 = parse_statement(
            base,
            len,
            idx,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if next_idx < 0 {
            break -1;
        };
        idx = next_idx;
    }
}

fn parse_block_expression(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut current_offset: i32 = offset;
    let mut result_offset: i32 = -1;
    loop {
        current_offset = skip_whitespace(base, len, current_offset);
        if current_offset >= len {
            return -1;
        };
        let current_byte: i32 = peek_byte(base, len, current_offset);
        if current_byte == 125 {
            return -1;
        };
        let prev_instr_offset: i32 = load_i32(instr_offset_ptr);
        let stmt_offset: i32 = parse_statement(
            base,
            len,
            current_offset,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if stmt_offset >= 0 {
            current_offset = stmt_offset;
            continue;
        };
        if stmt_offset != -1 {
            return -1;
        };
        store_i32(instr_offset_ptr, prev_instr_offset);
        let expr_offset: i32 = parse_expression(
            base,
            len,
            current_offset,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if expr_offset < 0 {
            return -1;
        };
        let mut after_expr: i32 = skip_whitespace(base, len, expr_offset);
        after_expr = expect_char(base, len, after_expr, 125);
        if after_expr < 0 {
            return -1;
        };
        result_offset = after_expr;
        break;
    }

    result_offset
}

fn parse_if_statement(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = expect_keyword_if(base, len, offset);
    if idx < 0 {
        return -1;
    };
    if idx < len {
        let after_byte: i32 = peek_byte(base, len, idx);
        if after_byte != 123 && !is_whitespace(after_byte) {
            return -1;
        };
    };
    idx = skip_whitespace(base, len, idx);
    idx = parse_expression(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };
    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 123);
    if idx < 0 {
        return -1;
    };

    let mut instr_offset: i32 = load_i32(instr_offset_ptr);
    instr_offset = emit_if(instr_base, instr_offset, 64);
    store_i32(instr_offset_ptr, instr_offset);

    let mut after_block: i32 = parse_block_statements(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if after_block < 0 {
        return -1;
    };

    idx = skip_whitespace(base, len, after_block);

    if idx + 4 <= len {
        let e_char: i32 = peek_byte(base, len, idx);
        if e_char == 101 {
            let l_char: i32 = peek_byte(base, len, idx + 1);
            let s_char: i32 = peek_byte(base, len, idx + 2);
            let e2_char: i32 = peek_byte(base, len, idx + 3);
            if l_char == 108 && s_char == 115 && e2_char == 101 {
                let after_else: i32 = idx + 4;
                if after_else < len && is_identifier_continue(peek_byte(base, len, after_else)) {
                    return -1;
                };
                idx = skip_whitespace(base, len, after_else);
                let mut instr_offset_else: i32 = load_i32(instr_offset_ptr);
                instr_offset_else = emit_else(instr_base, instr_offset_else);
                store_i32(instr_offset_ptr, instr_offset_else);
                if idx >= len {
                    return -1;
                };
                let next_byte: i32 = peek_byte(base, len, idx);
                if next_byte == 123 {
                    idx = expect_char(base, len, idx, 123);
                    idx = parse_block_statements(
                        base,
                        len,
                        idx,
                        instr_base,
                        instr_offset_ptr,
                        locals_base,
                        locals_count_ptr
                    );
                    if idx < 0 {
                        return -1;
                    };
                    idx = skip_whitespace(base, len, idx);
                } else if next_byte == 105 {
                    idx = parse_if_statement(
                        base,
                        len,
                        idx,
                        instr_base,
                        instr_offset_ptr,
                        locals_base,
                        locals_count_ptr
                    );
                    if idx < 0 {
                        return -1;
                    };
                    idx = skip_whitespace(base, len, idx);
                } else {
                    return -1;
                };
            };
        };
    };

    let mut final_instr_offset: i32 = load_i32(instr_offset_ptr);
    final_instr_offset = emit_end(instr_base, final_instr_offset);
    store_i32(instr_offset_ptr, final_instr_offset);

    if idx < len {
        let maybe_semicolon: i32 = peek_byte(base, len, idx);
        if maybe_semicolon == 59 {
            idx = idx + 1;
        };
    };

    idx
}

fn parse_if_expression(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = expect_keyword_if(base, len, offset);
    if idx < 0 {
        return -1;
    };
    if idx < len {
        let after_byte: i32 = peek_byte(base, len, idx);
        if after_byte != 123 && !is_whitespace(after_byte) && after_byte != 40 {
            return -1;
        };
    };
    idx = skip_whitespace(base, len, idx);
    idx = parse_expression(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };
    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 123);
    if idx < 0 {
        return -1;
    };

    let mut instr_offset: i32 = load_i32(instr_offset_ptr);
    instr_offset = emit_if(instr_base, instr_offset, 127);
    store_i32(instr_offset_ptr, instr_offset);

    let mut after_block: i32 = parse_block_expression(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if after_block < 0 {
        return -1;
    };

    idx = skip_whitespace(base, len, after_block);

    if idx + 4 > len {
        return -1;
    };
    let e_char: i32 = peek_byte(base, len, idx);
    let l_char: i32 = peek_byte(base, len, idx + 1);
    let s_char: i32 = peek_byte(base, len, idx + 2);
    let e2_char: i32 = peek_byte(base, len, idx + 3);
    if e_char != 101 || l_char != 108 || s_char != 115 || e2_char != 101 {
        return -1;
    };
    let after_else: i32 = idx + 4;
    if after_else < len && is_identifier_continue(peek_byte(base, len, after_else)) {
        return -1;
    };
    idx = skip_whitespace(base, len, after_else);

    let mut instr_offset_else: i32 = load_i32(instr_offset_ptr);
    instr_offset_else = emit_else(instr_base, instr_offset_else);
    store_i32(instr_offset_ptr, instr_offset_else);

    if idx >= len {
        return -1;
    };
    let next_byte: i32 = peek_byte(base, len, idx);
    if next_byte == 123 {
        idx = expect_char(base, len, idx, 123);
        idx = parse_block_expression(
            base,
            len,
            idx,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if idx < 0 {
            return -1;
        };
        idx = skip_whitespace(base, len, idx);
    } else if next_byte == 105 {
        idx = parse_if_expression(
            base,
            len,
            idx,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if idx < 0 {
            return -1;
        };
        idx = skip_whitespace(base, len, idx);
    } else {
        return -1;
    };

    let mut final_instr_offset: i32 = load_i32(instr_offset_ptr);
    final_instr_offset = emit_end(instr_base, final_instr_offset);
    store_i32(instr_offset_ptr, final_instr_offset);

    idx
}

fn parse_let_statement(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = expect_keyword_let(base, len, offset);
    if idx < 0 {
        return -1;
    };
    if idx >= len {
        return -1;
    };
    let after_keyword: i32 = peek_byte(base, len, idx);
    if !is_whitespace(after_keyword) {
        return -1;
    };
    idx = skip_whitespace(base, len, idx);
    if idx >= len {
        return -1;
    };

    let mut is_mut: bool = false;
    if idx + 3 <= len {
        let m: i32 = peek_byte(base, len, idx);
        if m == 109 {
            let u: i32 = peek_byte(base, len, idx + 1);
            let t: i32 = peek_byte(base, len, idx + 2);
            if u == 117 && t == 116 {
                let after_mut: i32 = idx + 3;
                if after_mut >= len {
                    return -1;
                };
                let after_mut_byte: i32 = peek_byte(base, len, after_mut);
                if is_whitespace(after_mut_byte) {
                    is_mut = true;
                    idx = skip_whitespace(base, len, after_mut);
                };
            };
        };
    };

    let name_start: i32 = idx;
    let mut name_len: i32 = 0;
    loop {
        if idx >= len {
            break;
        };
        let ch: i32 = peek_byte(base, len, idx);
        if name_len == 0 {
            if !is_identifier_start(ch) {
                break;
            };
        } else if !is_identifier_continue(ch) {
            break;
        };
        name_len = name_len + 1;
        idx = idx + 1;
    };
    if name_len == 0 {
        return -1;
    };

    let existing: i32 = locals_find(
        base,
        len,
        locals_base,
        locals_count_ptr,
        name_start,
        name_len
    );
    if existing >= 0 {
        return -1;
    };

    let local_index: i32 = load_i32(locals_count_ptr);

    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 58);
    if idx < 0 {
        return -1;
    };

    idx = skip_whitespace(base, len, idx);
    if idx >= len {
        return -1;
    };

    let mut matched_type: bool = false;
    if idx + 4 <= len {
        let b_char: i32 = peek_byte(base, len, idx);
        if b_char == 98 {
            let o_char: i32 = peek_byte(base, len, idx + 1);
            let o2_char: i32 = peek_byte(base, len, idx + 2);
            let l_char: i32 = peek_byte(base, len, idx + 3);
            if o_char == 111 && o2_char == 111 && l_char == 108 {
                let after_bool: i32 = idx + 4;
                if after_bool == len || !is_identifier_continue(peek_byte(base, len, after_bool)) {
                    idx = after_bool;
                    matched_type = true;
                };
            };
        };
    };

    if !matched_type {
        idx = expect_keyword_i32(base, len, idx);
        if idx < 0 {
            return -1;
        };
    };

    if idx < len {
        let after_type: i32 = peek_byte(base, len, idx);
        if after_type != 61 && !is_whitespace(after_type) {
            return -1;
        };
    };

    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 61);
    if idx < 0 {
        return -1;
    };

    idx = parse_expression(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    let mut instr_offset: i32 = load_i32(instr_offset_ptr);
    instr_offset = emit_local_set(instr_base, instr_offset, local_index);
    store_i32(instr_offset_ptr, instr_offset);

    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 59);
    if idx < 0 {
        return -1;
    };

    locals_store_entry(
        locals_base,
        locals_count_ptr,
        name_start,
        name_len,
        local_index,
        is_mut
    );

    idx
}

fn parse_assignment_statement(
    base: i32,
    len: i32,
    offset: i32,
    instr_base: i32,
    instr_offset_ptr: i32,
    locals_base: i32,
    locals_count_ptr: i32
) -> i32 {
    let mut idx: i32 = offset;
    if idx >= len {
        return -2;
    };
    let first: i32 = peek_byte(base, len, idx);
    if !is_identifier_start(first) {
        return -2;
    };

    let name_start: i32 = idx;
    let mut name_len: i32 = 0;
    loop {
        if idx >= len {
            break;
        };
        let ch: i32 = peek_byte(base, len, idx);
        if name_len == 0 {
            if !is_identifier_start(ch) {
                break;
            };
        } else if !is_identifier_continue(ch) {
            break;
        };
        name_len = name_len + 1;
        idx = idx + 1;
    };
    if name_len == 0 {
        return -1;
    };

    idx = skip_whitespace(base, len, idx);
    if idx >= len {
        return -1;
    };
    let eq_byte: i32 = peek_byte(base, len, idx);
    if eq_byte != 61 {
        return -2;
    };
    idx = idx + 1;

    idx = skip_whitespace(base, len, idx);
    idx = parse_expression(
        base,
        len,
        idx,
        instr_base,
        instr_offset_ptr,
        locals_base,
        locals_count_ptr
    );
    if idx < 0 {
        return -1;
    };

    idx = skip_whitespace(base, len, idx);
    idx = expect_char(base, len, idx, 59);
    if idx < 0 {
        return -1;
    };

    let local_index: i32 = locals_find(
        base,
        len,
        locals_base,
        locals_count_ptr,
        name_start,
        name_len
    );
    if local_index < 0 {
        return -1;
    };
    if !locals_is_mutable(locals_base, local_index) {
        return -1;
    };

    let mut instr_offset: i32 = load_i32(instr_offset_ptr);
    instr_offset = emit_local_set(instr_base, instr_offset, local_index);
    store_i32(instr_offset_ptr, instr_offset);

    idx = skip_whitespace(base, len, idx);

    idx
}

fn compile(input_ptr: i32, input_len: i32, out_ptr: i32) -> i32 {
    if input_len == 0 {
        return -1;
    };

    let mut offset: i32 = skip_whitespace(input_ptr, input_len, 0);

    offset = expect_keyword_fn(input_ptr, input_len, offset);
    if offset < 0 {
        return -1;
    };

    if offset >= input_len {
        return -1;
    };
    let after_fn_byte: i32 = peek_byte(input_ptr, input_len, offset);
    if after_fn_byte < 0 || !is_whitespace(after_fn_byte) {
        return -1;
    };
    let mut next_offset: i32 = skip_whitespace(input_ptr, input_len, offset);
    if next_offset == offset {
        return -1;
    };
    offset = next_offset;

    offset = expect_keyword_main(input_ptr, input_len, offset);
    if offset < 0 {
        return -1;
    };

    if offset >= input_len {
        return -1;
    };
    let after_main_byte: i32 = peek_byte(input_ptr, input_len, offset);
    if after_main_byte != 40 && !is_whitespace(after_main_byte) {
        return -1;
    };
    offset = skip_whitespace(input_ptr, input_len, offset);

    offset = expect_char(input_ptr, input_len, offset, 40);
    if offset < 0 {
        return -1;
    };

    offset = skip_whitespace(input_ptr, input_len, offset);

    offset = expect_char(input_ptr, input_len, offset, 41);
    if offset < 0 {
        return -1;
    };

    offset = skip_whitespace(input_ptr, input_len, offset);

    offset = expect_char(input_ptr, input_len, offset, 45);
    if offset < 0 {
        return -1;
    };
    offset = expect_char(input_ptr, input_len, offset, 62);
    if offset < 0 {
        return -1;
    };

    offset = skip_whitespace(input_ptr, input_len, offset);

    offset = expect_keyword_i32(input_ptr, input_len, offset);
    if offset < 0 {
        return -1;
    };

    if offset >= input_len {
        return -1;
    };
    let after_type_byte: i32 = peek_byte(input_ptr, input_len, offset);
    if after_type_byte != 123 && !is_whitespace(after_type_byte) {
        return -1;
    };
    offset = skip_whitespace(input_ptr, input_len, offset);

    offset = expect_char(input_ptr, input_len, offset, 123);
    if offset < 0 {
        return -1;
    };

    let instr_base: i32 = out_ptr + 8192;
    let instr_offset_ptr: i32 = out_ptr + 4096;
    store_i32(instr_offset_ptr, 0);
    let locals_count_ptr: i32 = out_ptr + 12280;
    let locals_base: i32 = out_ptr + 12288;
    store_i32(locals_count_ptr, 0);

    let mut current_offset: i32 = offset;

    loop {
        current_offset = skip_whitespace(input_ptr, input_len, current_offset);
        if current_offset >= input_len {
            return -1;
        };

        let current_byte: i32 = peek_byte(input_ptr, input_len, current_offset);
        if current_byte == 125 {
            current_offset = current_offset + 1;
            break;
        };

        let prev_instr_offset: i32 = load_i32(instr_offset_ptr);
        let stmt_offset: i32 = parse_statement(
            input_ptr,
            input_len,
            current_offset,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if stmt_offset >= 0 {
            current_offset = stmt_offset;
            continue;
        };

        if stmt_offset != -1 {
            return -1;
        };

        store_i32(instr_offset_ptr, prev_instr_offset);

        let expr_offset: i32 = parse_expression(
            input_ptr,
            input_len,
            current_offset,
            instr_base,
            instr_offset_ptr,
            locals_base,
            locals_count_ptr
        );
        if expr_offset < 0 {
            return -1;
        };
        let mut after_expr: i32 = skip_whitespace(input_ptr, input_len, expr_offset);
        after_expr = expect_char(input_ptr, input_len, after_expr, 125);
        if after_expr < 0 {
            return -1;
        };
        current_offset = after_expr + 0;
        break;
    }

    current_offset = skip_whitespace(input_ptr, input_len, current_offset);
    if current_offset != input_len {
        return -1;
    };

    let mut instr_offset: i32 = load_i32(instr_offset_ptr);
    instr_offset = emit_end(instr_base, instr_offset);
    let local_count: i32 = load_i32(locals_count_ptr);
    write_constant_module(out_ptr, instr_base, instr_offset, local_count)
}

fn main() -> i32 {
    0
}
